# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from avito_ads.models.auth_error import AuthError
from avito_ads.models.bad_request_error import BadRequestError
from avito_ads.models.item_vas_prices_resp import ItemVasPricesResp
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

VASPRICES200RESPONSE_ONE_OF_SCHEMAS = ["AuthError", "BadRequestError", "List[ItemVasPricesResp]"]

class VasPrices200Response(BaseModel):
    """
    VasPrices200Response
    """
    # data type: List[ItemVasPricesResp]
    oneof_schema_1_validator: Optional[List[ItemVasPricesResp]] = None
    # data type: BadRequestError
    oneof_schema_2_validator: Optional[BadRequestError] = None
    # data type: AuthError
    oneof_schema_3_validator: Optional[AuthError] = None
    actual_instance: Optional[Union[AuthError, BadRequestError, List[ItemVasPricesResp]]] = None
    one_of_schemas: Set[str] = { "AuthError", "BadRequestError", "List[ItemVasPricesResp]" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = VasPrices200Response.model_construct()
        error_messages = []
        match = 0
        # validate data type: List[ItemVasPricesResp]
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: BadRequestError
        if not isinstance(v, BadRequestError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BadRequestError`")
        else:
            match += 1
        # validate data type: AuthError
        if not isinstance(v, AuthError):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuthError`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in VasPrices200Response with oneOf schemas: AuthError, BadRequestError, List[ItemVasPricesResp]. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in VasPrices200Response with oneOf schemas: AuthError, BadRequestError, List[ItemVasPricesResp]. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into List[ItemVasPricesResp]
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BadRequestError
        try:
            instance.actual_instance = BadRequestError.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthError
        try:
            instance.actual_instance = AuthError.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into VasPrices200Response with oneOf schemas: AuthError, BadRequestError, List[ItemVasPricesResp]. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into VasPrices200Response with oneOf schemas: AuthError, BadRequestError, List[ItemVasPricesResp]. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AuthError, BadRequestError, List[ItemVasPricesResp]]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


