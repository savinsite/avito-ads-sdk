# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from avito_ads.models.sticker_resp import StickerResp
from avito_ads.models.vas_resp import VasResp
from typing import Optional, Set
from typing_extensions import Self

class ItemVasPricesResp(BaseModel):
    """
    ItemVasPricesResp
    """ # noqa: E501
    item_id: Optional[StrictInt] = Field(default=None, description="Идентификатор объявления на сайте", alias="itemId")
    stickers: Optional[List[StickerResp]] = None
    vas: List[VasResp]
    __properties: ClassVar[List[str]] = ["itemId", "stickers", "vas"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemVasPricesResp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stickers (list)
        _items = []
        if self.stickers:
            for _item_stickers in self.stickers:
                if _item_stickers:
                    _items.append(_item_stickers.to_dict())
            _dict['stickers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vas (list)
        _items = []
        if self.vas:
            for _item_vas in self.vas:
                if _item_vas:
                    _items.append(_item_vas.to_dict())
            _dict['vas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemVasPricesResp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "itemId": obj.get("itemId"),
            "stickers": [StickerResp.from_dict(_item) for _item in obj["stickers"]] if obj.get("stickers") is not None else None,
            "vas": [VasResp.from_dict(_item) for _item in obj["vas"]] if obj.get("vas") is not None else None
        })
        return _obj


