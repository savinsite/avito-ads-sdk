# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VacancyStatusesResultInnerVacancy(BaseModel):
    """
    VacancyStatusesResultInnerVacancy
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор опубликованной вакансии на Авито")
    moderation_status: Optional[StrictStr] = Field(default=None, description="Статус модерации вакансии на Авито. Может отсутствовать, если процесс модерации вакансии еще не начался <br> Возможные значения:    - in_progress - вакансия в процессе модерации   - allowed - вакансия разрешена на модерации   - blocked - вакансия заблокирована на модерации   - rejected - вакансия отклонена на модерации ")
    reasons: Optional[Dict[str, Any]] = Field(default=None, description="Расширенное описание статуса")
    status: Optional[StrictStr] = Field(default=None, description="Статус вакансии на Авито")
    url: Optional[StrictStr] = Field(default=None, description="URL вакансии")
    __properties: ClassVar[List[str]] = ["id", "moderation_status", "reasons", "status", "url"]

    @field_validator('moderation_status')
    def moderation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_progress', 'allowed', 'blocked', 'rejected']):
            raise ValueError("must be one of enum values ('in_progress', 'allowed', 'blocked', 'rejected')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['created', 'activated', 'archived', 'blocked', 'closed', 'expired', 'rejected', 'unblocked']):
            raise ValueError("must be one of enum values ('created', 'activated', 'archived', 'blocked', 'closed', 'expired', 'rejected', 'unblocked')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VacancyStatusesResultInnerVacancy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if moderation_status (nullable) is None
        # and model_fields_set contains the field
        if self.moderation_status is None and "moderation_status" in self.model_fields_set:
            _dict['moderation_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VacancyStatusesResultInnerVacancy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "moderation_status": obj.get("moderation_status"),
            "reasons": obj.get("reasons"),
            "status": obj.get("status"),
            "url": obj.get("url")
        })
        return _obj


