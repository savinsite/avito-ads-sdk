# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Resume20ParamsExperienceListInner(BaseModel):
    """
    Resume20ParamsExperienceListInner
    """ # noqa: E501
    company: Optional[StrictStr] = Field(default=None, description="Наименование организации")
    position: Optional[StrictStr] = Field(default=None, description="Занимаемая должность")
    responsibilities: Optional[StrictStr] = Field(default=None, description="Должностные обязанности")
    work_finish: Optional[date] = Field(default=None, description="Дата увольнения (при отсутствии считать, что работает по настоящее время)")
    work_start: Optional[date] = Field(default=None, description="Дата приема на работу")
    __properties: ClassVar[List[str]] = ["company", "position", "responsibilities", "work_finish", "work_start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resume20ParamsExperienceListInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if company (nullable) is None
        # and model_fields_set contains the field
        if self.company is None and "company" in self.model_fields_set:
            _dict['company'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if responsibilities (nullable) is None
        # and model_fields_set contains the field
        if self.responsibilities is None and "responsibilities" in self.model_fields_set:
            _dict['responsibilities'] = None

        # set to None if work_finish (nullable) is None
        # and model_fields_set contains the field
        if self.work_finish is None and "work_finish" in self.model_fields_set:
            _dict['work_finish'] = None

        # set to None if work_start (nullable) is None
        # and model_fields_set contains the field
        if self.work_start is None and "work_start" in self.model_fields_set:
            _dict['work_start'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resume20ParamsExperienceListInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "company": obj.get("company"),
            "position": obj.get("position"),
            "responsibilities": obj.get("responsibilities"),
            "work_finish": obj.get("work_finish"),
            "work_start": obj.get("work_start")
        })
        return _obj


