# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.resume20_params_education_list_inner import Resume20ParamsEducationListInner
from avito_job.models.resume20_params_experience_list_inner import Resume20ParamsExperienceListInner
from avito_job.models.resume20_params_language_list_inner import Resume20ParamsLanguageListInner
from typing import Optional, Set
from typing_extensions import Self

class Resume20Params(BaseModel):
    """
    Блок с параметрами резюме. Все поля опциональны и выводятся при наличии
    """ # noqa: E501
    ability_to_business_trip: Optional[StrictStr] = Field(default=None, description="Готовность к командировкам")
    address: Optional[StrictStr] = Field(default=None, description="Место, рядом с которым вы хотите работать")
    age: Optional[StrictInt] = Field(default=None, description="Возраст соискателя")
    business_area: Optional[StrictStr] = Field(default=None, description="Сфера деятельности")
    driver_licence: Optional[StrictStr] = Field(default=None, description="Водительское удостоверение")
    driver_licence_category: Optional[List[StrictStr]] = Field(default=None, description="Категория водительских прав")
    education: Optional[StrictStr] = Field(default=None, description="Образование соискателя")
    education_list: Optional[List[Resume20ParamsEducationListInner]] = None
    experience_list: Optional[List[Resume20ParamsExperienceListInner]] = None
    language_list: Optional[List[Resume20ParamsLanguageListInner]] = None
    moving: Optional[StrictStr] = Field(default=None, description="Возможность переезда")
    nationality: Optional[StrictStr] = Field(default=None, description="Гражданство соискателя")
    pol: Optional[StrictStr] = Field(default=None, description="Пол соискателя")
    razreshenie_na_rabotu_v_rossii: Optional[StrictStr] = Field(default=None, description="Наличие разрешения на работу в России")
    schedule: Optional[StrictStr] = Field(default=None, description="Режим работы Возможные значения:   - flyInFlyOut - Вахта   - partTime - Неполный день   - fullDay - Полный день   - flexible - Плавающий   - shift - Сменный   - remote - Удалённая работа   - fiveDay - Пятидневная рабочая неделя   - sixDay - Шестидневная рабочая неделя ")
    __properties: ClassVar[List[str]] = ["ability_to_business_trip", "address", "age", "business_area", "driver_licence", "driver_licence_category", "education", "education_list", "experience_list", "language_list", "moving", "nationality", "pol", "razreshenie_na_rabotu_v_rossii", "schedule"]

    @field_validator('ability_to_business_trip')
    def ability_to_business_trip_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Не готов', 'Готов', 'Иногда']):
            raise ValueError("must be one of enum values ('Не готов', 'Готов', 'Иногда')")
        return value

    @field_validator('business_area')
    def business_area_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IT, интернет, телеком', 'Автомобильный бизнес', 'Административная работа', 'Банки, инвестиции', 'Без опыта, студенты', 'Бухгалтерия, финансы', 'Высший менеджмент', 'Госслужба, НКО', 'Домашний персонал', 'ЖКХ, эксплуатация', 'Искусство, развлечения', 'Консультирование', 'Курьерская доставка', 'Маркетинг, реклама, PR', 'Медицина, фармацевтика', 'Образование, наука', 'Охрана, безопасность', 'Продажи', 'Производство, сырьё, с/х', 'Страхование', 'Строительство', 'Такси', 'Транспорт, логистика', 'Туризм, рестораны', 'Управление персоналом', 'Фитнес, салоны красоты', 'Юриспруденция']):
            raise ValueError("must be one of enum values ('IT, интернет, телеком', 'Автомобильный бизнес', 'Административная работа', 'Банки, инвестиции', 'Без опыта, студенты', 'Бухгалтерия, финансы', 'Высший менеджмент', 'Госслужба, НКО', 'Домашний персонал', 'ЖКХ, эксплуатация', 'Искусство, развлечения', 'Консультирование', 'Курьерская доставка', 'Маркетинг, реклама, PR', 'Медицина, фармацевтика', 'Образование, наука', 'Охрана, безопасность', 'Продажи', 'Производство, сырьё, с/х', 'Страхование', 'Строительство', 'Такси', 'Транспорт, логистика', 'Туризм, рестораны', 'Управление персоналом', 'Фитнес, салоны красоты', 'Юриспруденция')")
        return value

    @field_validator('driver_licence')
    def driver_licence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false']):
            raise ValueError("must be one of enum values ('true', 'false')")
        return value

    @field_validator('driver_licence_category')
    def driver_licence_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['a', 'b', 'be', 'c', 'ce', 'd', 'de', 'm', 'tm', 'tb']):
                raise ValueError("each list item must be one of ('a', 'b', 'be', 'c', 'ce', 'd', 'de', 'm', 'tm', 'tb')")
        return value

    @field_validator('education')
    def education_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Высшее', 'Незаконченное высшее', 'Среднее', 'Среднее специальное']):
            raise ValueError("must be one of enum values ('Высшее', 'Незаконченное высшее', 'Среднее', 'Среднее специальное')")
        return value

    @field_validator('moving')
    def moving_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Невозможен', 'Возможен']):
            raise ValueError("must be one of enum values ('Невозможен', 'Возможен')")
        return value

    @field_validator('pol')
    def pol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Мужской', 'Женский']):
            raise ValueError("must be one of enum values ('Мужской', 'Женский')")
        return value

    @field_validator('razreshenie_na_rabotu_v_rossii')
    def razreshenie_na_rabotu_v_rossii_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Да', 'Нет']):
            raise ValueError("must be one of enum values ('Да', 'Нет')")
        return value

    @field_validator('schedule')
    def schedule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flyInFlyOut', 'partTime', 'fullDay', 'flexible', 'shift', 'remote', 'fiveDay', 'sixDay']):
            raise ValueError("must be one of enum values ('flyInFlyOut', 'partTime', 'fullDay', 'flexible', 'shift', 'remote', 'fiveDay', 'sixDay')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resume20Params from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in education_list (list)
        _items = []
        if self.education_list:
            for _item_education_list in self.education_list:
                if _item_education_list:
                    _items.append(_item_education_list.to_dict())
            _dict['education_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in experience_list (list)
        _items = []
        if self.experience_list:
            for _item_experience_list in self.experience_list:
                if _item_experience_list:
                    _items.append(_item_experience_list.to_dict())
            _dict['experience_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in language_list (list)
        _items = []
        if self.language_list:
            for _item_language_list in self.language_list:
                if _item_language_list:
                    _items.append(_item_language_list.to_dict())
            _dict['language_list'] = _items
        # set to None if ability_to_business_trip (nullable) is None
        # and model_fields_set contains the field
        if self.ability_to_business_trip is None and "ability_to_business_trip" in self.model_fields_set:
            _dict['ability_to_business_trip'] = None

        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if business_area (nullable) is None
        # and model_fields_set contains the field
        if self.business_area is None and "business_area" in self.model_fields_set:
            _dict['business_area'] = None

        # set to None if driver_licence (nullable) is None
        # and model_fields_set contains the field
        if self.driver_licence is None and "driver_licence" in self.model_fields_set:
            _dict['driver_licence'] = None

        # set to None if driver_licence_category (nullable) is None
        # and model_fields_set contains the field
        if self.driver_licence_category is None and "driver_licence_category" in self.model_fields_set:
            _dict['driver_licence_category'] = None

        # set to None if education (nullable) is None
        # and model_fields_set contains the field
        if self.education is None and "education" in self.model_fields_set:
            _dict['education'] = None

        # set to None if education_list (nullable) is None
        # and model_fields_set contains the field
        if self.education_list is None and "education_list" in self.model_fields_set:
            _dict['education_list'] = None

        # set to None if experience_list (nullable) is None
        # and model_fields_set contains the field
        if self.experience_list is None and "experience_list" in self.model_fields_set:
            _dict['experience_list'] = None

        # set to None if language_list (nullable) is None
        # and model_fields_set contains the field
        if self.language_list is None and "language_list" in self.model_fields_set:
            _dict['language_list'] = None

        # set to None if moving (nullable) is None
        # and model_fields_set contains the field
        if self.moving is None and "moving" in self.model_fields_set:
            _dict['moving'] = None

        # set to None if nationality (nullable) is None
        # and model_fields_set contains the field
        if self.nationality is None and "nationality" in self.model_fields_set:
            _dict['nationality'] = None

        # set to None if pol (nullable) is None
        # and model_fields_set contains the field
        if self.pol is None and "pol" in self.model_fields_set:
            _dict['pol'] = None

        # set to None if razreshenie_na_rabotu_v_rossii (nullable) is None
        # and model_fields_set contains the field
        if self.razreshenie_na_rabotu_v_rossii is None and "razreshenie_na_rabotu_v_rossii" in self.model_fields_set:
            _dict['razreshenie_na_rabotu_v_rossii'] = None

        # set to None if schedule (nullable) is None
        # and model_fields_set contains the field
        if self.schedule is None and "schedule" in self.model_fields_set:
            _dict['schedule'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resume20Params from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ability_to_business_trip": obj.get("ability_to_business_trip"),
            "address": obj.get("address"),
            "age": obj.get("age"),
            "business_area": obj.get("business_area"),
            "driver_licence": obj.get("driver_licence"),
            "driver_licence_category": obj.get("driver_licence_category"),
            "education": obj.get("education"),
            "education_list": [Resume20ParamsEducationListInner.from_dict(_item) for _item in obj["education_list"]] if obj.get("education_list") is not None else None,
            "experience_list": [Resume20ParamsExperienceListInner.from_dict(_item) for _item in obj["experience_list"]] if obj.get("experience_list") is not None else None,
            "language_list": [Resume20ParamsLanguageListInner.from_dict(_item) for _item in obj["language_list"]] if obj.get("language_list") is not None else None,
            "moving": obj.get("moving"),
            "nationality": obj.get("nationality"),
            "pol": obj.get("pol"),
            "razreshenie_na_rabotu_v_rossii": obj.get("razreshenie_na_rabotu_v_rossii"),
            "schedule": obj.get("schedule")
        })
        return _obj


