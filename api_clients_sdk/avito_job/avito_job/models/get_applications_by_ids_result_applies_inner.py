# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.enriched_properties import EnrichedProperties
from avito_job.models.get_applications_by_ids_result_applies_inner_applicant import GetApplicationsByIdsResultAppliesInnerApplicant
from avito_job.models.get_applications_by_ids_result_applies_inner_contacts import GetApplicationsByIdsResultAppliesInnerContacts
from avito_job.models.get_applications_by_ids_result_applies_inner_prevalidation import GetApplicationsByIdsResultAppliesInnerPrevalidation
from avito_job.models.get_applications_by_ids_result_applies_inner_price import GetApplicationsByIdsResultAppliesInnerPrice
from typing import Optional, Set
from typing_extensions import Self

class GetApplicationsByIdsResultAppliesInner(BaseModel):
    """
    GetApplicationsByIdsResultAppliesInner
    """ # noqa: E501
    applicant: Optional[GetApplicationsByIdsResultAppliesInnerApplicant] = None
    contacts: Optional[GetApplicationsByIdsResultAppliesInnerContacts] = None
    created_at: Optional[StrictStr] = Field(default=None, description="Дата создания отклика")
    employee_id: Optional[StrictInt] = Field(default=None, description="Идентификатор сотрудника разместившего вакансию")
    enriched_properties: Optional[EnrichedProperties] = None
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор отклика")
    is_viewed: Optional[StrictBool] = Field(default=None, description="Отклик просмотрен")
    negotiation_id: Optional[StrictInt] = Field(default=None, description="Идентификатор отклика старого формата")
    prevalidation: Optional[GetApplicationsByIdsResultAppliesInnerPrevalidation] = None
    price: Optional[GetApplicationsByIdsResultAppliesInnerPrice] = None
    type: Optional[StrictStr] = Field(default=None, description="Тип отклика  Возможные значения:  - \"by_phone\" - отклик через просмотр телефона  - \"by_chat\" - отклик через чат ")
    updated_at: Optional[StrictStr] = Field(default=None, description="Дата обновления отклика")
    vacancy_id: Optional[StrictInt] = Field(default=None, description="Идентификатор вакансии на сайте Авито")
    __properties: ClassVar[List[str]] = ["applicant", "contacts", "created_at", "employee_id", "enriched_properties", "id", "is_viewed", "negotiation_id", "prevalidation", "price", "type", "updated_at", "vacancy_id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['by_phone', 'by_chat']):
            raise ValueError("must be one of enum values ('by_phone', 'by_chat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetApplicationsByIdsResultAppliesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applicant
        if self.applicant:
            _dict['applicant'] = self.applicant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict['contacts'] = self.contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enriched_properties
        if self.enriched_properties:
            _dict['enriched_properties'] = self.enriched_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prevalidation
        if self.prevalidation:
            _dict['prevalidation'] = self.prevalidation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # set to None if employee_id (nullable) is None
        # and model_fields_set contains the field
        if self.employee_id is None and "employee_id" in self.model_fields_set:
            _dict['employee_id'] = None

        # set to None if negotiation_id (nullable) is None
        # and model_fields_set contains the field
        if self.negotiation_id is None and "negotiation_id" in self.model_fields_set:
            _dict['negotiation_id'] = None

        # set to None if prevalidation (nullable) is None
        # and model_fields_set contains the field
        if self.prevalidation is None and "prevalidation" in self.model_fields_set:
            _dict['prevalidation'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetApplicationsByIdsResultAppliesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicant": GetApplicationsByIdsResultAppliesInnerApplicant.from_dict(obj["applicant"]) if obj.get("applicant") is not None else None,
            "contacts": GetApplicationsByIdsResultAppliesInnerContacts.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
            "created_at": obj.get("created_at"),
            "employee_id": obj.get("employee_id"),
            "enriched_properties": EnrichedProperties.from_dict(obj["enriched_properties"]) if obj.get("enriched_properties") is not None else None,
            "id": obj.get("id"),
            "is_viewed": obj.get("is_viewed"),
            "negotiation_id": obj.get("negotiation_id"),
            "prevalidation": GetApplicationsByIdsResultAppliesInnerPrevalidation.from_dict(obj["prevalidation"]) if obj.get("prevalidation") is not None else None,
            "price": GetApplicationsByIdsResultAppliesInnerPrice.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "vacancy_id": obj.get("vacancy_id")
        })
        return _obj


