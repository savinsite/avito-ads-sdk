# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.enriched_properties_age import EnrichedPropertiesAge
from avito_job.models.enriched_properties_citizenship import EnrichedPropertiesCitizenship
from avito_job.models.enriched_properties_experience import EnrichedPropertiesExperience
from avito_job.models.enriched_properties_full_name import EnrichedPropertiesFullName
from avito_job.models.enriched_properties_gender import EnrichedPropertiesGender
from avito_job.models.enriched_properties_phone import EnrichedPropertiesPhone
from typing import Optional, Set
from typing_extensions import Self

class EnrichedProperties(BaseModel):
    """
    Данные о кандидате
    """ # noqa: E501
    age: Optional[EnrichedPropertiesAge] = None
    citizenship: Optional[EnrichedPropertiesCitizenship] = None
    experience: Optional[EnrichedPropertiesExperience] = None
    full_name: Optional[EnrichedPropertiesFullName] = None
    gender: Optional[EnrichedPropertiesGender] = None
    phone: Optional[EnrichedPropertiesPhone] = None
    status: Optional[StrictStr] = Field(default=None, description="Текущий статус опроса. Возможные значения:<br/>  - `\"in_progress\"` - кандидат еще проходит опрос<br/>  - `\"not_completed\"` - кандидату не удалось пройти опрос до конца (например, истекло время на опрос)<br/>  - `\"completed_no_criteria\"` - опрос завершен без оценки ответов по критериям вакансии<br/>  - `\"completed_matched\"` - опрос завершен, кандидат подошел под критерии вакансии<br/>  - `\"completed_mismatched\"` - опрос завершен, кандидат не подошел под критерии вакансии")
    __properties: ClassVar[List[str]] = ["age", "citizenship", "experience", "full_name", "gender", "phone", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_progress', 'not_completed', 'completed_no_criteria', 'completed_matched', 'completed_mismatched']):
            raise ValueError("must be one of enum values ('in_progress', 'not_completed', 'completed_no_criteria', 'completed_matched', 'completed_mismatched')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnrichedProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of citizenship
        if self.citizenship:
            _dict['citizenship'] = self.citizenship.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experience
        if self.experience:
            _dict['experience'] = self.experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_name
        if self.full_name:
            _dict['full_name'] = self.full_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gender
        if self.gender:
            _dict['gender'] = self.gender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if citizenship (nullable) is None
        # and model_fields_set contains the field
        if self.citizenship is None and "citizenship" in self.model_fields_set:
            _dict['citizenship'] = None

        # set to None if experience (nullable) is None
        # and model_fields_set contains the field
        if self.experience is None and "experience" in self.model_fields_set:
            _dict['experience'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['full_name'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnrichedProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": EnrichedPropertiesAge.from_dict(obj["age"]) if obj.get("age") is not None else None,
            "citizenship": EnrichedPropertiesCitizenship.from_dict(obj["citizenship"]) if obj.get("citizenship") is not None else None,
            "experience": EnrichedPropertiesExperience.from_dict(obj["experience"]) if obj.get("experience") is not None else None,
            "full_name": EnrichedPropertiesFullName.from_dict(obj["full_name"]) if obj.get("full_name") is not None else None,
            "gender": EnrichedPropertiesGender.from_dict(obj["gender"]) if obj.get("gender") is not None else None,
            "phone": EnrichedPropertiesPhone.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "status": obj.get("status")
        })
        return _obj


