# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.age_criteria import AgeCriteria
from avito_job.models.apply_processing import ApplyProcessing
from avito_job.models.contacts import Contacts
from avito_job.models.coordinates import Coordinates
from avito_job.models.grade import Grade
from avito_job.models.medical_book_vacancy import MedicalBookVacancy
from avito_job.models.salary_detail import SalaryDetail
from avito_job.models.tools_availability import ToolsAvailability
from avito_job.models.vacancy_create_driving_experience import VacancyCreateDrivingExperience
from avito_job.models.vacancy_create_experience import VacancyCreateExperience
from avito_job.models.vacancy_education_level import VacancyEducationLevel
from avito_job.models.vacancy_update_payout_frequency import VacancyUpdatePayoutFrequency
from avito_job.models.vacancy_update_salary_range import VacancyUpdateSalaryRange
from typing import Optional, Set
from typing_extensions import Self

class VacancyUpdate(BaseModel):
    """
    VacancyUpdate
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Полный адрес объекта (строка длиной от 0 до 256 символов)")
    administrator_organization_type: Optional[StrictInt] = Field(default=None, description="Тип организации в которой предстоит работать кандидату. Используется для профессии Администратор <br> Получить актуальный список доступных значений можно из справочника `administrator_organization_type` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-admininstrator-organization-type.xml) объявлен устаревшим и более не будет использоваться.  <br> ")
    age: Optional[AgeCriteria] = None
    age_preferences: Optional[List[StrictStr]] = None
    allow_calls: Optional[StrictBool] = Field(default=True, description="Разрешены ли звонки по вакансии.")
    allow_messages: Optional[StrictBool] = Field(default=None, description="Возможность откликнуться на вакансию через сайт. Если передается apply_processing, то значение allow_messages будет игнорироваться и равно true.")
    apply_processing: Optional[ApplyProcessing] = None
    billing_type: StrictStr = Field(description="Вариант платного размещения  Возможные значения:   - \"package\" - размещение объявления осуществляется только при наличии подходящего пакета размещения   - \"packageOrSingle\" - при наличии подходящего пакета оплата размещения объявления произойдет с него; если нет подходящего пакета, но достаточно денег на кошельке Авито, то произойдет разовое размещение   - \"single\" - только разовое размещение, произойдет при наличии достаточной суммы на кошельке Авито; если есть подходящий пакет размещения, он будет проигнорирован ")
    bonuses: Optional[List[StrictStr]] = Field(default=None, description="Бонусы, которые компания предоставляет кандидатам")
    citizenship: Optional[List[StrictStr]] = Field(default=None, description="Гражданство кандидата.  Если выберите значение, в данных кандидата будет отметка, что кандидат соответствует этому критерию или нет.  Кандидаты не увидят этого в вакансии. ")
    construction_work_type: Optional[List[StrictStr]] = Field(default=None, description="С какими видами строительных или ремонтных работ предстоит столкнуться кандидату <br> Возможные значения элементов массива:   - \"paintingWorks\" - Малярные работы;   - \"wallCovering\" - Облицовка стен;   - \"tileWork\" - Работы с плиткой;   - \"mountingAndInstallation\" - Монтаж и установка;   - \"finishingWork\" - Отделочные работы;   - \"roofing\" - Кровельные работы;   - \"installationAndConfigurationOfEquipment\" - Монтаж и настройка оборудования;   - \"weldingWork\" - Сварочные работы;   - \"constructionOfFacades\" - Строительство фасадов;   - \"formingMaterials\" - Формовка материалов;   - \"concreteAndStoneWorks\" - Бетонные и каменные работы;   - \"repairWork\" - Ремонтные работы;   - \"other\" - Другие. ")
    contacts: Optional[Contacts] = None
    coordinates: Optional[Coordinates] = None
    cuisine: Optional[List[StrictStr]] = Field(default=None, description="Блюда какой кухни предстоит готовить кандидату <br> Возможные значения элементов массива:   - \"russian\" - Русская;   - \"european\" - Европейская;   - \"caucasian\" - Кавказская;   - \"italian\" - Итальянская;   - \"japanese\" - Японская;   - \"turkish\" - Турецкая;   - \"other\" - Другая. ")
    custom_employer_name: Optional[StrictStr] = Field(default=None, description="Название компании (строка длиной до 60 символов)")
    delivery_method: Optional[List[StrictStr]] = Field(default=None, description="Способ доставки")
    description: Optional[StrictStr] = Field(default=None, description="Описание вакансии (строка длиной от 1 до 5000 символов) Поддерживает html-тэги `p`, `ul`, `ol`, `li`, `br`, `strong`, `em`")
    driving_experience: Optional[VacancyCreateDrivingExperience] = None
    driving_license_category: Optional[List[StrictStr]] = Field(default=None, description="Категория прав")
    eatery_type: Optional[List[StrictStr]] = Field(default=None, description="Формат заведения общепита в котором предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cafe\" - Кафе;   - \"bar\" - Бар;   - \"fastFood\" - Фастфуд;   - \"restaurant\" - Ресторан;   - \"canteen\" - Столовая;   - \"bakery\" - Пекарня;   - \"other\" - Другой. ")
    education_level: Optional[VacancyEducationLevel] = None
    employee_id: Optional[StrictInt] = Field(default=None, description="employee_id - Идентификатор сотрудника на Авито. Сотрудник может редактировать только закрепленные за ним вакансии в Avito Pro. Сотрудник должен быть в активен. ")
    experience: Optional[VacancyCreateExperience] = None
    facility_type: Optional[List[StrictStr]] = Field(default=None, description="Тип склада или производственной линии на которой предстоит работать кандидату <br> Возможные значения элементов массива:   - \"production\" - Производство;   - \"logisticsCenter\" - Логистический центр;   - \"warehouse\" - Склад;   - \"other\" - Другое. ")
    food_production_shop_type: Optional[List[StrictStr]] = Field(default=None, description="В каком цеху по приготовлению пищи предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cold\" - Холодный;   - \"hot\" - Горячий;   - \"confectionery\" - Кондитерский;   - \"preparation\" - Заготовочный;   - \"other\" - Другой. ")
    grade: Optional[Grade] = None
    html_tags: Optional[StrictBool] = Field(default=None, description="Поле deprecated - теперь всегда description с html-тэгами. Флаг, указывающий на наличие html-тэгов в описании вакансии, для их специальной обработки. По умолчанию `false` Поддерживаемые тэги - `p`, `ul`, `ol`, `li`, `br`, `strong`, `em` ")
    image_url: Optional[StrictStr] = Field(default=None, description="URL-адрес логотипа вакансии. Ссылка на файл должна быть прямой | (при переходе не открываются элементы другого сайта (логотипы, кнопки или другие детали интерфейса) и не запрашивается логин и пароль) и доступной для IP 185.89.12.0/22, 146.158.48.0/21, 185.79.237.224/28 и 87.245.204.32/28;")
    is_company_car: Optional[StrictBool] = Field(default=None, description="Предоставляет ли компания автомобиль")
    is_side_job: Optional[StrictBool] = Field(default=None, description="Подработка")
    medical_book: Optional[MedicalBookVacancy] = None
    medical_specialization: Optional[List[StrictStr]] = Field(default=None, description="Медицинская специализация (можно указать несколько значений через запятую) <br> см. названия специализаций в [ справочнике ](https://www.avito.st/s/openapi/catalog-medical-spec.xml) ")
    medical_specialization_ids: Optional[List[StrictInt]] = Field(default=None, description="Медицинская специализация (можно указать несколько значений) <br> Получить актуальный список доступных значений можно из справочника `medical_specialization` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). ")
    name: Optional[StrictStr] = Field(default=None, description="Название вакансии (строка длиной от 0 до 50 символов)")
    payout_frequency: Optional[VacancyUpdatePayoutFrequency] = None
    profession: Optional[StrictInt] = Field(default=None, description="Название профессии <br> Получить актуальный список доступных значений можно из справочника `profession` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-profession.xml?v=5) объявлен устаревшим и более не будет использоваться. <br>")
    registration_method: Optional[List[StrictStr]] = Field(default=None, description="Способ оформления (можно указать несколько значений через запятую) <br> Возможные значения: - contract - Трудовой договор - gph_ip - ГПХ с ИП - gph_self_employed - ГПХ с самозанятым - gph_individual - ГПХ с физическим лицом ")
    retail_equipment_type: Optional[List[StrictStr]] = Field(default=None, description="С каким оборудованием или ПО предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cashRegisterAndPosTerminals\" - Касса и POS-терминалы;   - \"accountingSoftware\" - Программы учёта товаров. ")
    retail_shop_type: Optional[List[StrictStr]] = Field(default=None, description="Что продает магазин в котором предстоит работать кандидату <br> Возможные значения элементов массива:   - \"hypermarketOrSupermarket\" - Гипермаркет или супермаркет;   - \"grocery\" - Продуктовый;   - \"electronicsAndHouseholdAppliances\" - Электроника и бытовая техника;   - \"clothesAndShoes\" - Одежда и обувь;   - \"perfumesAndCosmetics\" - Парфюмерия и косметика;   - \"constructionAndHouseholdGoods\" - Строительство и хозтовары;   - \"childrenGoods\" - Детские товары;   - \"sportingGoods\" - Спортивные товары;   - \"petShop\" - Зоомагазин;   - \"pharmacy\" - Аптека;   - \"other\" - Другое. ")
    salary: Optional[StrictInt] = Field(default=None, description="Зарплата, рублей в месяц, если заполнено вместе с salary_range, то приоритет у salary_range")
    salary_detail: Optional[SalaryDetail] = None
    salary_range: Optional[VacancyUpdateSalaryRange] = None
    shifts: Optional[List[StrictInt]] = Field(default=None, description="Смены <br> Получить актуальный список доступных значений можно из справочника `shifts` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Доступен только для следующих режимов работы (schedule): \"Сменный (shift)\",  \"Фиксированный (fixed)\" <br> Для режима работы (schedule) \"Фиксированный (fixed)\" доступны только значения показывающие отношение количества рабочих дней к выходным, например \"5/2\" ")
    tools_availability: Optional[ToolsAvailability] = None
    vacancy_code: Optional[StrictStr] = Field(default=None, description="Внутренний идентификатор вакансии или номер заявки на подбор, максимум 150 символов")
    vehicle_type: Optional[StrictInt] = Field(default=None, description="На какой технике предстоит работать кандитату, от выбора техники зависит какие категории прав можно будет указать в вакансии <br> Получить актуальный список доступных значений можно из справочника `vehicle_type` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-vehicle-type.xml) объявлен устаревшим и более не будет использоваться.  <br> Используется только для профессий   - Водитель пассажирского транспорта  - Водитель грузового транспорта  - Водитель спецтехники  - Машинист спецтехники <br> ")
    work_days_per_week: Optional[List[StrictInt]] = Field(default=None, description="Количество рабочих дней в неделю <br> Получить актуальный список доступных значений можно из справочника `work_days_per_week` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Доступен только для режима работы (schedule) равным \"Гибкий (flexible)\" ")
    work_format: Optional[List[StrictStr]] = Field(default=None, description="Блок \"Формат работы\" (массив строк)  Возможные значения элементов массива:   - \"office\" - В офисе или на объекте;   - \"remote\" - Удалённо;   - \"gibrid\" - Гибрид. ")
    work_hours_per_day: Optional[List[StrictInt]] = Field(default=None, description="Количество рабочих часов в день <br> Получить актуальный список доступных значений можно из справочника `work_hours_per_day` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Для режима работы (schedule) равным \"Вахта (flyInFlyOut)\" недоступны значения \"13–15 часов\", \"Больше 15 часов\"  <br> Для типа занятости (employment) равным \"Полная (full)\" недоступны значения \"До 4 часов\", \"4–5 часов\" <br> Для типов занятости (employment) равным \"Временная (temporary)\", \"Стажировка (internship)\", \"Частичная (partial)\" недоступно значение \"Больше 15 часов\" ")
    worker_class: Optional[List[StrictStr]] = Field(default=None, description="Предпочтительный разряд кандидата <br> Возможные значения элементов массива:   - \"1\" - Первый;   - \"2\" - Второй;   - \"3\" - Третий;   - \"4\" - Четвертый;   - \"5andHigher\" - Пятый и выше;   - \"notNeeded\" - Не требуется. ")
    __properties: ClassVar[List[str]] = ["address", "administrator_organization_type", "age", "age_preferences", "allow_calls", "allow_messages", "apply_processing", "billing_type", "bonuses", "citizenship", "construction_work_type", "contacts", "coordinates", "cuisine", "custom_employer_name", "delivery_method", "description", "driving_experience", "driving_license_category", "eatery_type", "education_level", "employee_id", "experience", "facility_type", "food_production_shop_type", "grade", "html_tags", "image_url", "is_company_car", "is_side_job", "medical_book", "medical_specialization", "medical_specialization_ids", "name", "payout_frequency", "profession", "registration_method", "retail_equipment_type", "retail_shop_type", "salary", "salary_detail", "salary_range", "shifts", "tools_availability", "vacancy_code", "vehicle_type", "work_days_per_week", "work_format", "work_hours_per_day", "worker_class"]

    @field_validator('age_preferences')
    def age_preferences_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['olderThan45', 'olderThan14', 'olderThan16', 'withHealthProblems', 'students', 'pensioners']):
                raise ValueError("each list item must be one of ('olderThan45', 'olderThan14', 'olderThan16', 'withHealthProblems', 'students', 'pensioners')")
        return value

    @field_validator('billing_type')
    def billing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['package', 'single', 'packageOrSingle']):
            raise ValueError("must be one of enum values ('package', 'single', 'packageOrSingle')")
        return value

    @field_validator('bonuses')
    def bonuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['prozivanie', 'pitanie', 'medicinskaia_straxovka', 'uniform', 'oplata_benzina', 'transport_do_raboty', 'skidki_v_kompanii', 'parkovka', 'zony_otdyxa', 'podarki_detiam_na_prazdniki', 'oplata_mobilnoi_sviazi', 'obuchenie', 'kompensaciya_proezda_s_raboti', 'kasko', 'smartphone', 'uslugi_shinomontaza']):
                raise ValueError("each list item must be one of ('prozivanie', 'pitanie', 'medicinskaia_straxovka', 'uniform', 'oplata_benzina', 'transport_do_raboty', 'skidki_v_kompanii', 'parkovka', 'zony_otdyxa', 'podarki_detiam_na_prazdniki', 'oplata_mobilnoi_sviazi', 'obuchenie', 'kompensaciya_proezda_s_raboti', 'kasko', 'smartphone', 'uslugi_shinomontaza')")
        return value

    @field_validator('citizenship')
    def citizenship_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['rus', 'blr', 'kaz', 'kgz', 'tjk', 'arm', 'uzb', 'ukr']):
                raise ValueError("each list item must be one of ('rus', 'blr', 'kaz', 'kgz', 'tjk', 'arm', 'uzb', 'ukr')")
        return value

    @field_validator('construction_work_type')
    def construction_work_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['paintingWorks', 'wallCovering', 'tileWork', 'mountingAndInstallation', 'finishingWork', 'roofing', 'installationAndConfigurationOfEquipment', 'weldingWork', 'constructionOfFacades', 'formingMaterials', 'concreteAndStoneWorks', 'repairWork', 'other']):
                raise ValueError("each list item must be one of ('paintingWorks', 'wallCovering', 'tileWork', 'mountingAndInstallation', 'finishingWork', 'roofing', 'installationAndConfigurationOfEquipment', 'weldingWork', 'constructionOfFacades', 'formingMaterials', 'concreteAndStoneWorks', 'repairWork', 'other')")
        return value

    @field_validator('cuisine')
    def cuisine_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['russian', 'european', 'caucasian', 'italian', 'japanese', 'turkish', 'other']):
                raise ValueError("each list item must be one of ('russian', 'european', 'caucasian', 'italian', 'japanese', 'turkish', 'other')")
        return value

    @field_validator('delivery_method')
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['car', 'bike', 'scooter', 'foot']):
                raise ValueError("each list item must be one of ('car', 'bike', 'scooter', 'foot')")
        return value

    @field_validator('driving_license_category')
    def driving_license_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['A', 'AI', 'AII', 'AIII', 'AIV', 'B', 'B1', 'BE', 'C', 'C1', 'C1E', 'CE', 'D', 'D1', 'D1E', 'DE', 'E', 'F', 'Tm', 'Tb', 'M']):
                raise ValueError("each list item must be one of ('A', 'AI', 'AII', 'AIII', 'AIV', 'B', 'B1', 'BE', 'C', 'C1', 'C1E', 'CE', 'D', 'D1', 'D1E', 'DE', 'E', 'F', 'Tm', 'Tb', 'M')")
        return value

    @field_validator('eatery_type')
    def eatery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cafe', 'bar', 'fastFood', 'restaurant', 'canteen', 'bakery', 'other']):
                raise ValueError("each list item must be one of ('cafe', 'bar', 'fastFood', 'restaurant', 'canteen', 'bakery', 'other')")
        return value

    @field_validator('facility_type')
    def facility_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['production', 'logisticsCenter', 'warehouse', 'other']):
                raise ValueError("each list item must be one of ('production', 'logisticsCenter', 'warehouse', 'other')")
        return value

    @field_validator('food_production_shop_type')
    def food_production_shop_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cold', 'hot', 'confectionery', 'preparation', 'other']):
                raise ValueError("each list item must be one of ('cold', 'hot', 'confectionery', 'preparation', 'other')")
        return value

    @field_validator('registration_method')
    def registration_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['contract', 'gph_ip', 'gph_self_employed', 'gph_individual']):
                raise ValueError("each list item must be one of ('contract', 'gph_ip', 'gph_self_employed', 'gph_individual')")
        return value

    @field_validator('retail_equipment_type')
    def retail_equipment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cashRegisterAndPosTerminals', 'accountingSoftware']):
                raise ValueError("each list item must be one of ('cashRegisterAndPosTerminals', 'accountingSoftware')")
        return value

    @field_validator('retail_shop_type')
    def retail_shop_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['hypermarketOrSupermarket', 'grocery', 'electronicsAndHouseholdAppliances', 'clothesAndShoes', 'perfumesAndCosmetics', 'constructionAndHouseholdGoods', 'childrenGoods', 'sportingGoods', 'petShop', 'pharmacy', 'other']):
                raise ValueError("each list item must be one of ('hypermarketOrSupermarket', 'grocery', 'electronicsAndHouseholdAppliances', 'clothesAndShoes', 'perfumesAndCosmetics', 'constructionAndHouseholdGoods', 'childrenGoods', 'sportingGoods', 'petShop', 'pharmacy', 'other')")
        return value

    @field_validator('work_format')
    def work_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['office', 'remote', 'gibrid']):
                raise ValueError("each list item must be one of ('office', 'remote', 'gibrid')")
        return value

    @field_validator('worker_class')
    def worker_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['1', '2', '3', '4', '5andHigher', 'notNeeded']):
                raise ValueError("each list item must be one of ('1', '2', '3', '4', '5andHigher', 'notNeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VacancyUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apply_processing
        if self.apply_processing:
            _dict['apply_processing'] = self.apply_processing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict['contacts'] = self.contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of driving_experience
        if self.driving_experience:
            _dict['driving_experience'] = self.driving_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of experience
        if self.experience:
            _dict['experience'] = self.experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_frequency
        if self.payout_frequency:
            _dict['payout_frequency'] = self.payout_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salary_detail
        if self.salary_detail:
            _dict['salary_detail'] = self.salary_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salary_range
        if self.salary_range:
            _dict['salary_range'] = self.salary_range.to_dict()
        # set to None if administrator_organization_type (nullable) is None
        # and model_fields_set contains the field
        if self.administrator_organization_type is None and "administrator_organization_type" in self.model_fields_set:
            _dict['administrator_organization_type'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if age_preferences (nullable) is None
        # and model_fields_set contains the field
        if self.age_preferences is None and "age_preferences" in self.model_fields_set:
            _dict['age_preferences'] = None

        # set to None if allow_calls (nullable) is None
        # and model_fields_set contains the field
        if self.allow_calls is None and "allow_calls" in self.model_fields_set:
            _dict['allow_calls'] = None

        # set to None if apply_processing (nullable) is None
        # and model_fields_set contains the field
        if self.apply_processing is None and "apply_processing" in self.model_fields_set:
            _dict['apply_processing'] = None

        # set to None if bonuses (nullable) is None
        # and model_fields_set contains the field
        if self.bonuses is None and "bonuses" in self.model_fields_set:
            _dict['bonuses'] = None

        # set to None if citizenship (nullable) is None
        # and model_fields_set contains the field
        if self.citizenship is None and "citizenship" in self.model_fields_set:
            _dict['citizenship'] = None

        # set to None if construction_work_type (nullable) is None
        # and model_fields_set contains the field
        if self.construction_work_type is None and "construction_work_type" in self.model_fields_set:
            _dict['construction_work_type'] = None

        # set to None if cuisine (nullable) is None
        # and model_fields_set contains the field
        if self.cuisine is None and "cuisine" in self.model_fields_set:
            _dict['cuisine'] = None

        # set to None if delivery_method (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_method is None and "delivery_method" in self.model_fields_set:
            _dict['delivery_method'] = None

        # set to None if driving_experience (nullable) is None
        # and model_fields_set contains the field
        if self.driving_experience is None and "driving_experience" in self.model_fields_set:
            _dict['driving_experience'] = None

        # set to None if driving_license_category (nullable) is None
        # and model_fields_set contains the field
        if self.driving_license_category is None and "driving_license_category" in self.model_fields_set:
            _dict['driving_license_category'] = None

        # set to None if eatery_type (nullable) is None
        # and model_fields_set contains the field
        if self.eatery_type is None and "eatery_type" in self.model_fields_set:
            _dict['eatery_type'] = None

        # set to None if education_level (nullable) is None
        # and model_fields_set contains the field
        if self.education_level is None and "education_level" in self.model_fields_set:
            _dict['education_level'] = None

        # set to None if facility_type (nullable) is None
        # and model_fields_set contains the field
        if self.facility_type is None and "facility_type" in self.model_fields_set:
            _dict['facility_type'] = None

        # set to None if food_production_shop_type (nullable) is None
        # and model_fields_set contains the field
        if self.food_production_shop_type is None and "food_production_shop_type" in self.model_fields_set:
            _dict['food_production_shop_type'] = None

        # set to None if grade (nullable) is None
        # and model_fields_set contains the field
        if self.grade is None and "grade" in self.model_fields_set:
            _dict['grade'] = None

        # set to None if is_company_car (nullable) is None
        # and model_fields_set contains the field
        if self.is_company_car is None and "is_company_car" in self.model_fields_set:
            _dict['is_company_car'] = None

        # set to None if is_side_job (nullable) is None
        # and model_fields_set contains the field
        if self.is_side_job is None and "is_side_job" in self.model_fields_set:
            _dict['is_side_job'] = None

        # set to None if medical_book (nullable) is None
        # and model_fields_set contains the field
        if self.medical_book is None and "medical_book" in self.model_fields_set:
            _dict['medical_book'] = None

        # set to None if medical_specialization (nullable) is None
        # and model_fields_set contains the field
        if self.medical_specialization is None and "medical_specialization" in self.model_fields_set:
            _dict['medical_specialization'] = None

        # set to None if medical_specialization_ids (nullable) is None
        # and model_fields_set contains the field
        if self.medical_specialization_ids is None and "medical_specialization_ids" in self.model_fields_set:
            _dict['medical_specialization_ids'] = None

        # set to None if payout_frequency (nullable) is None
        # and model_fields_set contains the field
        if self.payout_frequency is None and "payout_frequency" in self.model_fields_set:
            _dict['payout_frequency'] = None

        # set to None if profession (nullable) is None
        # and model_fields_set contains the field
        if self.profession is None and "profession" in self.model_fields_set:
            _dict['profession'] = None

        # set to None if registration_method (nullable) is None
        # and model_fields_set contains the field
        if self.registration_method is None and "registration_method" in self.model_fields_set:
            _dict['registration_method'] = None

        # set to None if retail_equipment_type (nullable) is None
        # and model_fields_set contains the field
        if self.retail_equipment_type is None and "retail_equipment_type" in self.model_fields_set:
            _dict['retail_equipment_type'] = None

        # set to None if retail_shop_type (nullable) is None
        # and model_fields_set contains the field
        if self.retail_shop_type is None and "retail_shop_type" in self.model_fields_set:
            _dict['retail_shop_type'] = None

        # set to None if salary_detail (nullable) is None
        # and model_fields_set contains the field
        if self.salary_detail is None and "salary_detail" in self.model_fields_set:
            _dict['salary_detail'] = None

        # set to None if shifts (nullable) is None
        # and model_fields_set contains the field
        if self.shifts is None and "shifts" in self.model_fields_set:
            _dict['shifts'] = None

        # set to None if tools_availability (nullable) is None
        # and model_fields_set contains the field
        if self.tools_availability is None and "tools_availability" in self.model_fields_set:
            _dict['tools_availability'] = None

        # set to None if vacancy_code (nullable) is None
        # and model_fields_set contains the field
        if self.vacancy_code is None and "vacancy_code" in self.model_fields_set:
            _dict['vacancy_code'] = None

        # set to None if vehicle_type (nullable) is None
        # and model_fields_set contains the field
        if self.vehicle_type is None and "vehicle_type" in self.model_fields_set:
            _dict['vehicle_type'] = None

        # set to None if work_days_per_week (nullable) is None
        # and model_fields_set contains the field
        if self.work_days_per_week is None and "work_days_per_week" in self.model_fields_set:
            _dict['work_days_per_week'] = None

        # set to None if work_hours_per_day (nullable) is None
        # and model_fields_set contains the field
        if self.work_hours_per_day is None and "work_hours_per_day" in self.model_fields_set:
            _dict['work_hours_per_day'] = None

        # set to None if worker_class (nullable) is None
        # and model_fields_set contains the field
        if self.worker_class is None and "worker_class" in self.model_fields_set:
            _dict['worker_class'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VacancyUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "administrator_organization_type": obj.get("administrator_organization_type"),
            "age": AgeCriteria.from_dict(obj["age"]) if obj.get("age") is not None else None,
            "age_preferences": obj.get("age_preferences"),
            "allow_calls": obj.get("allow_calls") if obj.get("allow_calls") is not None else True,
            "allow_messages": obj.get("allow_messages"),
            "apply_processing": ApplyProcessing.from_dict(obj["apply_processing"]) if obj.get("apply_processing") is not None else None,
            "billing_type": obj.get("billing_type"),
            "bonuses": obj.get("bonuses"),
            "citizenship": obj.get("citizenship"),
            "construction_work_type": obj.get("construction_work_type"),
            "contacts": Contacts.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
            "coordinates": Coordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "cuisine": obj.get("cuisine"),
            "custom_employer_name": obj.get("custom_employer_name"),
            "delivery_method": obj.get("delivery_method"),
            "description": obj.get("description"),
            "driving_experience": VacancyCreateDrivingExperience.from_dict(obj["driving_experience"]) if obj.get("driving_experience") is not None else None,
            "driving_license_category": obj.get("driving_license_category"),
            "eatery_type": obj.get("eatery_type"),
            "education_level": obj.get("education_level"),
            "employee_id": obj.get("employee_id"),
            "experience": VacancyCreateExperience.from_dict(obj["experience"]) if obj.get("experience") is not None else None,
            "facility_type": obj.get("facility_type"),
            "food_production_shop_type": obj.get("food_production_shop_type"),
            "grade": obj.get("grade"),
            "html_tags": obj.get("html_tags"),
            "image_url": obj.get("image_url"),
            "is_company_car": obj.get("is_company_car"),
            "is_side_job": obj.get("is_side_job"),
            "medical_book": obj.get("medical_book"),
            "medical_specialization": obj.get("medical_specialization"),
            "medical_specialization_ids": obj.get("medical_specialization_ids"),
            "name": obj.get("name"),
            "payout_frequency": VacancyUpdatePayoutFrequency.from_dict(obj["payout_frequency"]) if obj.get("payout_frequency") is not None else None,
            "profession": obj.get("profession"),
            "registration_method": obj.get("registration_method"),
            "retail_equipment_type": obj.get("retail_equipment_type"),
            "retail_shop_type": obj.get("retail_shop_type"),
            "salary": obj.get("salary"),
            "salary_detail": SalaryDetail.from_dict(obj["salary_detail"]) if obj.get("salary_detail") is not None else None,
            "salary_range": VacancyUpdateSalaryRange.from_dict(obj["salary_range"]) if obj.get("salary_range") is not None else None,
            "shifts": obj.get("shifts"),
            "tools_availability": obj.get("tools_availability"),
            "vacancy_code": obj.get("vacancy_code"),
            "vehicle_type": obj.get("vehicle_type"),
            "work_days_per_week": obj.get("work_days_per_week"),
            "work_format": obj.get("work_format"),
            "work_hours_per_day": obj.get("work_hours_per_day"),
            "worker_class": obj.get("worker_class")
        })
        return _obj


