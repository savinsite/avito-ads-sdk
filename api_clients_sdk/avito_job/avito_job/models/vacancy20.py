# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.vacancy20_address_details import Vacancy20AddressDetails
from avito_job.models.vacancy20_params import Vacancy20Params
from typing import Optional, Set
from typing_extensions import Self

class Vacancy20(BaseModel):
    """
    Vacancy20
    """ # noqa: E501
    address_details: Optional[Vacancy20AddressDetails] = Field(default=None, alias="addressDetails")
    description: Optional[StrictStr] = Field(default=None, description="Описание вакансии")
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор вакансии на сайте")
    is_active: Optional[StrictBool] = Field(default=None, description="Активность вакансии")
    params: Optional[Vacancy20Params] = None
    salary: Optional[StrictInt] = Field(default=None, description="Зарплата. Выводится при наличии")
    start_time: Optional[StrictStr] = Field(default=None, description="Дата публикации вакансии")
    title: Optional[StrictStr] = Field(default=None, description="Наименование вакансии")
    update_time: Optional[StrictStr] = Field(default=None, description="Дата последнего обновления вакансии")
    url: Optional[StrictStr] = Field(default=None, description="URL вакансии на сайте")
    uuid: Optional[StrictStr] = Field(default=None, description="Идентификатор вакансии")
    __properties: ClassVar[List[str]] = ["addressDetails", "description", "id", "is_active", "params", "salary", "start_time", "title", "update_time", "url", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Vacancy20 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address_details
        if self.address_details:
            _dict['addressDetails'] = self.address_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        # set to None if address_details (nullable) is None
        # and model_fields_set contains the field
        if self.address_details is None and "address_details" in self.model_fields_set:
            _dict['addressDetails'] = None

        # set to None if salary (nullable) is None
        # and model_fields_set contains the field
        if self.salary is None and "salary" in self.model_fields_set:
            _dict['salary'] = None

        # set to None if uuid (nullable) is None
        # and model_fields_set contains the field
        if self.uuid is None and "uuid" in self.model_fields_set:
            _dict['uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Vacancy20 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressDetails": Vacancy20AddressDetails.from_dict(obj["addressDetails"]) if obj.get("addressDetails") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "is_active": obj.get("is_active"),
            "params": Vacancy20Params.from_dict(obj["params"]) if obj.get("params") is not None else None,
            "salary": obj.get("salary"),
            "start_time": obj.get("start_time"),
            "title": obj.get("title"),
            "update_time": obj.get("update_time"),
            "url": obj.get("url"),
            "uuid": obj.get("uuid")
        })
        return _obj


