# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avito_job.models.vacancy20_params import Vacancy20Params

class TestVacancy20Params(unittest.TestCase):
    """Vacancy20Params unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Vacancy20Params:
        """Test Vacancy20Params
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Vacancy20Params`
        """
        model = Vacancy20Params()
        if include_optional:
            return Vacancy20Params(
                address = 'Санкт-Петербург, Пушкин, Малая улица, 12',
                age_preferences = [
                    'Соискатели старше 45 лет'
                    ],
                bonuses = [
                    'Униформа'
                    ],
                business_area = '',
                change = [
                    '1 / 2'
                    ],
                construction_work_type = [
                    'Малярные работы'
                    ],
                coordinates = avito_job.models.vacancy2_0_params_coordinates.Vacancy2_0_params_coordinates(
                    latitude = 55.778644, 
                    longitude = 37.587901, ),
                cuisine = [
                    'Русская'
                    ],
                delivery_method = [
                    'На автомобиле'
                    ],
                driving_experience = 'Нет опыта',
                driving_license_category = [
                    'A'
                    ],
                eatery_type = [
                    'Кафе'
                    ],
                experience = 'Без опыта',
                facility_type = [
                    'Производство'
                    ],
                food_production_shop_type = [
                    'Холодный'
                    ],
                is_company_car = 'Да',
                medical_book = 'Должен оформить кандидат',
                paid_period = 'в месяц',
                payout_frequency = 'почасовая оплата',
                piecework_flag = 'Сдельная оплата',
                profession = '',
                programs = [
                    'Частые выплаты'
                    ],
                registration_method = [
                    'Трудовой договор'
                    ],
                retail_equipment_type = [
                    'Касса и POS-терминалы'
                    ],
                retail_shop_type = [
                    'Гипермаркет или супермаркет'
                    ],
                salary = avito_job.models.vacancy2_0_params_salary.Vacancy2_0_params_salary(
                    from = 30000, 
                    to = 60000, ),
                salary_base_bonus = '5% от продаж в месяц',
                salary_base_range = avito_job.models.vacancy2_0_params_salary_base_range.Vacancy2_0_params_salary_base_range(
                    from = 30000, 
                    to = 60000, ),
                schedule = '5/2',
                taxes = 'До вычета налогов',
                tools_availability = 'Нужны свои',
                where_to_work = 'На дому',
                worker_class = [
                    '1'
                    ]
            )
        else:
            return Vacancy20Params(
        )
        """

    def testVacancy20Params(self):
        """Test Vacancy20Params"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
