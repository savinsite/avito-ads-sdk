# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avito_job.models.get_applications_by_ids_result_applies_inner import GetApplicationsByIdsResultAppliesInner

class TestGetApplicationsByIdsResultAppliesInner(unittest.TestCase):
    """GetApplicationsByIdsResultAppliesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetApplicationsByIdsResultAppliesInner:
        """Test GetApplicationsByIdsResultAppliesInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetApplicationsByIdsResultAppliesInner`
        """
        model = GetApplicationsByIdsResultAppliesInner()
        if include_optional:
            return GetApplicationsByIdsResultAppliesInner(
                applicant = avito_job.models.get_applications_by_ids_result_applies_inner_applicant.GetApplicationsByIdsResult_applies_inner_applicant(
                    data = avito_job.models.get_applications_by_ids_result_applies_inner_applicant_data.GetApplicationsByIdsResult_applies_inner_applicant_data(
                        birthday = '1988-01-21', 
                        citizenship = 'Россия', 
                        education = 'unfinished-higher', 
                        full_name = avito_job.models.get_applications_by_ids_result_applies_inner_applicant_data_full_name.GetApplicationsByIdsResult_applies_inner_applicant_data_full_name(
                            first_name = 'Иван', 
                            last_name = 'Иванов', 
                            patronymic = 'Иванович', ), 
                        gender = 'female', 
                        name = 'Иванов Иван Иванович', ), 
                    id = '1110dc2f-be18-47ef-a524-cd1234321d42', 
                    resume_id = '54312', ),
                contacts = avito_job.models.get_applications_by_ids_result_applies_inner_contacts.GetApplicationsByIdsResult_applies_inner_contacts(
                    chat = avito_job.models.get_applications_by_ids_result_applies_inner_contacts_chat.GetApplicationsByIdsResult_applies_inner_contacts_chat(
                        value = 'u2i-2142059193-600277161', ), 
                    phones = [
                        avito_job.models.get_applications_by_ids_result_applies_inner_contacts_phones_inner.GetApplicationsByIdsResult_applies_inner_contacts_phones_inner(
                            status = 'received', 
                            value = '72002000014', )
                        ], ),
                created_at = '2022-05-04T12:00:00+03:00',
                employee_id = 727226498,
                enriched_properties = {"age":{"matching_status":"matched","value":21},"citizenship":{"matching_status":"matched","value":"rus"},"experience":{"matching_status":"mismatched","value":"lt_1"},"full_name":{"matching_status":"no_criteria","value":null},"gender":{"matching_status":"no_criteria","value":"male"},"phone":{"matching_status":"no_criteria","value":"+79213223344"},"status":"completed_mismatched"},
                id = '11102026de0ad1be10e2236f',
                is_viewed = True,
                negotiation_id = 1132,
                prevalidation = avito_job.models.get_applications_by_ids_result_applies_inner_prevalidation.GetApplicationsByIdsResult_applies_inner_prevalidation(
                    status = 'success', 
                    summary = [
                        {"label":"ФИО","value":"Сидоров Иван Петрович"}
                        ], ),
                price = avito_job.models.get_applications_by_ids_result_applies_inner_price.GetApplicationsByIdsResult_applies_inner_price(
                    bonus = 56, 
                    real = 56, 
                    total = 56, ),
                type = 'by_chat',
                updated_at = '2022-05-04T12:00:00+03:00',
                vacancy_id = 18725423
            )
        else:
            return GetApplicationsByIdsResultAppliesInner(
        )
        """

    def testGetApplicationsByIdsResultAppliesInner(self):
        """Test GetApplicationsByIdsResultAppliesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
