# coding: utf-8

"""
    Мессенджер

    API Мессенджера - набор методов для получения списка чатов пользователя на Авито, получения сообщений в чате, отправки сообщения в чат и другие Через API Мессенджера можно организовать интеграцию между мессенджером Авито и сторонней системой в обе стороны  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChatUsersInnerPublicUserProfileAvatarImages(BaseModel):
    """
    ChatUsersInnerPublicUserProfileAvatarImages
    """ # noqa: E501
    var_128x128: Optional[StrictStr] = Field(default=None, description="Аватар в формате 128х128", alias="128x128")
    var_192x192: Optional[StrictStr] = Field(default=None, description="Аватар в формате 192х192", alias="192x192")
    var_24x24: Optional[StrictStr] = Field(default=None, description="Аватар в формате 24х24", alias="24x24")
    var_256x256: Optional[StrictStr] = Field(default=None, description="Аватар в формате 256х256", alias="256x256")
    var_36x36: Optional[StrictStr] = Field(default=None, description="Аватар в формате 36х36", alias="36x36")
    var_48x48: Optional[StrictStr] = Field(default=None, description="Аватар в формате 48х48", alias="48x48")
    var_64x64: Optional[StrictStr] = Field(default=None, description="Аватар в формате 64х64", alias="64x64")
    var_72x72: Optional[StrictStr] = Field(default=None, description="Аватар в формате 72х72", alias="72x72")
    var_96x96: Optional[StrictStr] = Field(default=None, description="Аватар в формате 96х96", alias="96x96")
    __properties: ClassVar[List[str]] = ["128x128", "192x192", "24x24", "256x256", "36x36", "48x48", "64x64", "72x72", "96x96"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatUsersInnerPublicUserProfileAvatarImages from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatUsersInnerPublicUserProfileAvatarImages from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "128x128": obj.get("128x128"),
            "192x192": obj.get("192x192"),
            "24x24": obj.get("24x24"),
            "256x256": obj.get("256x256"),
            "36x36": obj.get("36x36"),
            "48x48": obj.get("48x48"),
            "64x64": obj.get("64x64"),
            "72x72": obj.get("72x72"),
            "96x96": obj.get("96x96")
        })
        return _obj


