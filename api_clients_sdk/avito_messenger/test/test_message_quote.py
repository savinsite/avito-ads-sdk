# coding: utf-8

"""
    Мессенджер

    API Мессенджера - набор методов для получения списка чатов пользователя на Авито, получения сообщений в чате, отправки сообщения в чат и другие Через API Мессенджера можно организовать интеграцию между мессенджером Авито и сторонней системой в обе стороны  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from avito_messenger.models.message_quote import MessageQuote

class TestMessageQuote(unittest.TestCase):
    """MessageQuote unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MessageQuote:
        """Test MessageQuote
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MessageQuote`
        """
        model = MessageQuote()
        if include_optional:
            return MessageQuote(
                author_id = 94235311,
                content = avito_messenger.models.message_content.MessageContent(
                    call = avito_messenger.models.message_content_call.MessageContent_call(
                        status = 'missed', 
                        target_user_id = 94235311, ), 
                    flow_id = 'seller_audience_discount', 
                    image = avito_messenger.models.message_content_image.MessageContent_image(
                        sizes = {"1280x960":"https://img.k.avito.ru/chat/1280x960/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","140x105":"https://img.k.avito.ru/chat/140x105/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","32x32":"https://img.k.avito.ru/chat/32x32/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","640x480":"https://img.k.avito.ru/chat/640x480/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg"}, ), 
                    item = avito_messenger.models.message_content_item.MessageContent_item(
                        image_url = 'https://avito.ru/image_url.webp', 
                        item_url = 'https://avito.ru/item_url', 
                        price_string = '1 232 323 ₽', 
                        title = 'Объявление', ), 
                    link = avito_messenger.models.message_content_link.MessageContent_link(
                        preview = avito_messenger.models.message_content_link_preview.MessageContent_link_preview(
                            description = 'Лучшие публикации за последние 24 часа', 
                            domain = 'habr.com', 
                            images = {"1280x960":"https://img.k.avito.ru/chat/1280x960/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","140x105":"https://img.k.avito.ru/chat/140x105/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","32x32":"https://img.k.avito.ru/chat/32x32/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg","640x480":"https://img.k.avito.ru/chat/640x480/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg"}, 
                            title = 'Лучшие публикации за сутки / Хабр', 
                            url = 'https://habr.com/ru/', ), 
                        text = 'habr.com', 
                        url = 'habr.com', ), 
                    location = avito_messenger.models.message_content_location.MessageContent_location(
                        kind = 'street', 
                        lat = 55.599799, 
                        lon = 37.603954, 
                        text = 'Москва, Варшавское шоссе', 
                        title = 'Москва, Варшавское шоссе', ), 
                    text = 'привет!', 
                    voice = avito_messenger.models.message_content_voice.MessageContent_voice(
                        voice_id = '', ), ),
                created = 1571654040,
                id = '',
                type = 'text'
            )
        else:
            return MessageQuote(
        )
        """

    def testMessageQuote(self):
        """Test MessageQuote"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
