# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Dict, Optional
from typing_extensions import Annotated
from avito_ads.models.analytics_request import AnalyticsRequest
from avito_ads.models.analytics_response import AnalyticsResponse
from avito_ads.models.apply_vas_request import ApplyVasRequest
from avito_ads.models.apply_vas_resp import ApplyVasResp
from avito_ads.models.calls_stats_request import CallsStatsRequest
from avito_ads.models.calls_stats_response import CallsStatsResponse
from avito_ads.models.item_info_avito import ItemInfoAvito
from avito_ads.models.items_info_with_category_avito import ItemsInfoWithCategoryAvito
from avito_ads.models.package_id_request_body_v2 import PackageIdRequestBodyV2
from avito_ads.models.prices_item_ids_request_body import PricesItemIdsRequestBody
from avito_ads.models.statistics_response import StatisticsResponse
from avito_ads.models.statistics_shallow_request_body import StatisticsShallowRequestBody
from avito_ads.models.vas_amount_avito import VasAmountAvito
from avito_ads.models.vas_apply_avito import VasApplyAvito
from avito_ads.models.vas_id_request_body import VasIdRequestBody
from avito_ads.models.vas_prices200_response import VasPrices200Response

from avito_ads.api_client import ApiClient, RequestSerialized
from avito_ads.api_response import ApiResponse
from avito_ads.rest import RESTResponseType


class ItemApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def apply_vas(
        self,
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        apply_vas_request: Optional[ApplyVasRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Dict[str, ApplyVasResp]:
        """Применение услуг продвижения

        С помощью этого метода вы можете применить к опубликованному объявлению одну или несколько услуг продвижения (например, «XL-объявление», «Выделение цветом» и «До 10 раз больше просмотров на 7 дней»). В рамках одного запроса услуга может быть применена только один раз.   Если для вашего объявления доступны значки (такие как «Без ДТП», «Срочно», «1 владелец»), при подключении услуги «XL-объявление» вы можете передать их список (не более трёх значков). В этом случае добавьте соответствующую услугу на 1, 2 или 3 значка.  [Подробнее об услугах продвижения](https://support.avito.ru/partitions/131)  Чтобы получить список доступных услуг и значков,  используйте метод `/core/v1/accounts/{userId}/vas/prices`.  Если заказ сформирован успешно, в ответ вы получите уникальные идентификаторы операций покупки для каждой из применяемых услуг. Позже эти идентификаторы можно будет использовать, чтобы узнать статус выполнения заказа.  В случае некорректного запроса метод вернет код ответа 400 и структуру, содержащую поле `code`. Возможные коды ошибок:   - **1001** – один или несколько заголовков неправильно передаются;   - **1002** – ошибка в URL;   - **1003** – неверный идентификатор объявления из запроса;   - **1004** – JSON из тела запроса не соответствует схеме или список идентификаторов услуг пустой;   - **1005** – объявление, к которому вы хотите применить услуги, неактивно;   - **1006** – неправильное количество выбранных значков для объявления. Убедитесь, что в списке идентификаторов услуг есть услуга для покупки значков и она совпадает с количеством выбранных значков.       - stickerpack_x1 – 1 значок       - stickerpack_x2 – 2 значка       - stickerpack_x3 – 3 значка   - **1007** – некоторые из выбранных услуг не могут быть применены;   - **1008** – в объявлении появились обязательные поля, которые нужно заполнить. Отредактируйте объявление и попробуйте применить услугу снова.   - **1009** – в кошельке не хватает средств для покупки услуг;   - **1010** – вы пытались купить больше одной услуги увеличения просмотров;   - **1011** – вы пытались купить значки, недоступные для выбранного объявления.  В случае внутренней ошибки на стороне Авито вернётся код ответа 500 и структура, содержащая поле `code`. Возможные коды ошибок:   - **1000** – ошибка на стороне Авито, попробуйте позже или [напишите в поддержку](https://support.avito.ru/request/659?eventData[contextId]=117);  **Важно:** если ответ пришёл без кода ошибки или его значения нет в списке выше — возможно, услуга всё-таки была куплена. Подождите несколько минут: услуга продвижения появится в списке применённых, а если нет — попробуйте оформить её снова. 

        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param apply_vas_request:
        :type apply_vas_request: ApplyVasRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apply_vas_serialize(
            item_id=item_id,
            authorization=authorization,
            apply_vas_request=apply_vas_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dict[str, ApplyVasResp]",
            '500': "ApplyVas500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def apply_vas_with_http_info(
        self,
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        apply_vas_request: Optional[ApplyVasRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Dict[str, ApplyVasResp]]:
        """Применение услуг продвижения

        С помощью этого метода вы можете применить к опубликованному объявлению одну или несколько услуг продвижения (например, «XL-объявление», «Выделение цветом» и «До 10 раз больше просмотров на 7 дней»). В рамках одного запроса услуга может быть применена только один раз.   Если для вашего объявления доступны значки (такие как «Без ДТП», «Срочно», «1 владелец»), при подключении услуги «XL-объявление» вы можете передать их список (не более трёх значков). В этом случае добавьте соответствующую услугу на 1, 2 или 3 значка.  [Подробнее об услугах продвижения](https://support.avito.ru/partitions/131)  Чтобы получить список доступных услуг и значков,  используйте метод `/core/v1/accounts/{userId}/vas/prices`.  Если заказ сформирован успешно, в ответ вы получите уникальные идентификаторы операций покупки для каждой из применяемых услуг. Позже эти идентификаторы можно будет использовать, чтобы узнать статус выполнения заказа.  В случае некорректного запроса метод вернет код ответа 400 и структуру, содержащую поле `code`. Возможные коды ошибок:   - **1001** – один или несколько заголовков неправильно передаются;   - **1002** – ошибка в URL;   - **1003** – неверный идентификатор объявления из запроса;   - **1004** – JSON из тела запроса не соответствует схеме или список идентификаторов услуг пустой;   - **1005** – объявление, к которому вы хотите применить услуги, неактивно;   - **1006** – неправильное количество выбранных значков для объявления. Убедитесь, что в списке идентификаторов услуг есть услуга для покупки значков и она совпадает с количеством выбранных значков.       - stickerpack_x1 – 1 значок       - stickerpack_x2 – 2 значка       - stickerpack_x3 – 3 значка   - **1007** – некоторые из выбранных услуг не могут быть применены;   - **1008** – в объявлении появились обязательные поля, которые нужно заполнить. Отредактируйте объявление и попробуйте применить услугу снова.   - **1009** – в кошельке не хватает средств для покупки услуг;   - **1010** – вы пытались купить больше одной услуги увеличения просмотров;   - **1011** – вы пытались купить значки, недоступные для выбранного объявления.  В случае внутренней ошибки на стороне Авито вернётся код ответа 500 и структура, содержащая поле `code`. Возможные коды ошибок:   - **1000** – ошибка на стороне Авито, попробуйте позже или [напишите в поддержку](https://support.avito.ru/request/659?eventData[contextId]=117);  **Важно:** если ответ пришёл без кода ошибки или его значения нет в списке выше — возможно, услуга всё-таки была куплена. Подождите несколько минут: услуга продвижения появится в списке применённых, а если нет — попробуйте оформить её снова. 

        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param apply_vas_request:
        :type apply_vas_request: ApplyVasRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apply_vas_serialize(
            item_id=item_id,
            authorization=authorization,
            apply_vas_request=apply_vas_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dict[str, ApplyVasResp]",
            '500': "ApplyVas500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def apply_vas_without_preload_content(
        self,
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        apply_vas_request: Optional[ApplyVasRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Применение услуг продвижения

        С помощью этого метода вы можете применить к опубликованному объявлению одну или несколько услуг продвижения (например, «XL-объявление», «Выделение цветом» и «До 10 раз больше просмотров на 7 дней»). В рамках одного запроса услуга может быть применена только один раз.   Если для вашего объявления доступны значки (такие как «Без ДТП», «Срочно», «1 владелец»), при подключении услуги «XL-объявление» вы можете передать их список (не более трёх значков). В этом случае добавьте соответствующую услугу на 1, 2 или 3 значка.  [Подробнее об услугах продвижения](https://support.avito.ru/partitions/131)  Чтобы получить список доступных услуг и значков,  используйте метод `/core/v1/accounts/{userId}/vas/prices`.  Если заказ сформирован успешно, в ответ вы получите уникальные идентификаторы операций покупки для каждой из применяемых услуг. Позже эти идентификаторы можно будет использовать, чтобы узнать статус выполнения заказа.  В случае некорректного запроса метод вернет код ответа 400 и структуру, содержащую поле `code`. Возможные коды ошибок:   - **1001** – один или несколько заголовков неправильно передаются;   - **1002** – ошибка в URL;   - **1003** – неверный идентификатор объявления из запроса;   - **1004** – JSON из тела запроса не соответствует схеме или список идентификаторов услуг пустой;   - **1005** – объявление, к которому вы хотите применить услуги, неактивно;   - **1006** – неправильное количество выбранных значков для объявления. Убедитесь, что в списке идентификаторов услуг есть услуга для покупки значков и она совпадает с количеством выбранных значков.       - stickerpack_x1 – 1 значок       - stickerpack_x2 – 2 значка       - stickerpack_x3 – 3 значка   - **1007** – некоторые из выбранных услуг не могут быть применены;   - **1008** – в объявлении появились обязательные поля, которые нужно заполнить. Отредактируйте объявление и попробуйте применить услугу снова.   - **1009** – в кошельке не хватает средств для покупки услуг;   - **1010** – вы пытались купить больше одной услуги увеличения просмотров;   - **1011** – вы пытались купить значки, недоступные для выбранного объявления.  В случае внутренней ошибки на стороне Авито вернётся код ответа 500 и структура, содержащая поле `code`. Возможные коды ошибок:   - **1000** – ошибка на стороне Авито, попробуйте позже или [напишите в поддержку](https://support.avito.ru/request/659?eventData[contextId]=117);  **Важно:** если ответ пришёл без кода ошибки или его значения нет в списке выше — возможно, услуга всё-таки была куплена. Подождите несколько минут: услуга продвижения появится в списке применённых, а если нет — попробуйте оформить её снова. 

        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param apply_vas_request:
        :type apply_vas_request: ApplyVasRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._apply_vas_serialize(
            item_id=item_id,
            authorization=authorization,
            apply_vas_request=apply_vas_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dict[str, ApplyVasResp]",
            '500': "ApplyVas500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _apply_vas_serialize(
        self,
        item_id,
        authorization,
        apply_vas_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if item_id is not None:
            _path_params['item_id'] = item_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if apply_vas_request is not None:
            _body_params = apply_vas_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/core/v2/items/{itemId}/vas/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_item_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemInfoAvito:
        """Получение информации по объявлению

        Возвращает данные об объявлении - его статус, список примененных услуг Максимальное количество запросов в минуту - 500 **Внимание:** для получения статистики объявления должен использоваться метод: [получение статистики по списку объявлений](#operation/itemStatsShallow) 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_info_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemInfoAvito",
            '429': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_item_info_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemInfoAvito]:
        """Получение информации по объявлению

        Возвращает данные об объявлении - его статус, список примененных услуг Максимальное количество запросов в минуту - 500 **Внимание:** для получения статистики объявления должен использоваться метод: [получение статистики по списку объявлений](#operation/itemStatsShallow) 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_info_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemInfoAvito",
            '429': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_item_info_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение информации по объявлению

        Возвращает данные об объявлении - его статус, список примененных услуг Максимальное количество запросов в минуту - 500 **Внимание:** для получения статистики объявления должен использоваться метод: [получение статистики по списку объявлений](#operation/itemStatsShallow) 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_item_info_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemInfoAvito",
            '429': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_item_info_serialize(
        self,
        user_id,
        item_id,
        authorization,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        if item_id is not None:
            _path_params['item_id'] = item_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/core/v1/accounts/{user_id}/items/{item_id}/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        per_page: Annotated[Optional[StrictInt], Field(description="Количество записей на странице (целое число больше 0 и меньше 100)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Номер страницы (целое число больше 0)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Статус объявления на сайте (можно указать несколько значений через запятую)")] = None,
        updated_at_from: Annotated[Optional[StrictStr], Field(description="Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD")] = None,
        category: Annotated[Optional[StrictInt], Field(description="Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ItemsInfoWithCategoryAvito:
        """Получение информации по объявлениям

        Возвращает список объявлений авторизованного пользователя - статус, категорию и ссылку на сайте. **Внимание! В настоящий момент этот метод не работает с объявлениями [сотрудников](https://pro.avito.ru/employees).** Он позволяет получить объявления только для пользователя, который указан владельцем этого объявления. В случае сотрудника это будет главный аккаунт компании, для авторизованного сотрудника вернётся пустой список объявлений. 

        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param per_page: Количество записей на странице (целое число больше 0 и меньше 100)
        :type per_page: int
        :param page: Номер страницы (целое число больше 0)
        :type page: int
        :param status: Статус объявления на сайте (можно указать несколько значений через запятую)
        :type status: str
        :param updated_at_from: Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD
        :type updated_at_from: str
        :param category: Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) 
        :type category: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_info_serialize(
            authorization=authorization,
            per_page=per_page,
            page=page,
            status=status,
            updated_at_from=updated_at_from,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsInfoWithCategoryAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_info_with_http_info(
        self,
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        per_page: Annotated[Optional[StrictInt], Field(description="Количество записей на странице (целое число больше 0 и меньше 100)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Номер страницы (целое число больше 0)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Статус объявления на сайте (можно указать несколько значений через запятую)")] = None,
        updated_at_from: Annotated[Optional[StrictStr], Field(description="Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD")] = None,
        category: Annotated[Optional[StrictInt], Field(description="Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ItemsInfoWithCategoryAvito]:
        """Получение информации по объявлениям

        Возвращает список объявлений авторизованного пользователя - статус, категорию и ссылку на сайте. **Внимание! В настоящий момент этот метод не работает с объявлениями [сотрудников](https://pro.avito.ru/employees).** Он позволяет получить объявления только для пользователя, который указан владельцем этого объявления. В случае сотрудника это будет главный аккаунт компании, для авторизованного сотрудника вернётся пустой список объявлений. 

        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param per_page: Количество записей на странице (целое число больше 0 и меньше 100)
        :type per_page: int
        :param page: Номер страницы (целое число больше 0)
        :type page: int
        :param status: Статус объявления на сайте (можно указать несколько значений через запятую)
        :type status: str
        :param updated_at_from: Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD
        :type updated_at_from: str
        :param category: Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) 
        :type category: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_info_serialize(
            authorization=authorization,
            per_page=per_page,
            page=page,
            status=status,
            updated_at_from=updated_at_from,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsInfoWithCategoryAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_info_without_preload_content(
        self,
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        per_page: Annotated[Optional[StrictInt], Field(description="Количество записей на странице (целое число больше 0 и меньше 100)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Номер страницы (целое число больше 0)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Статус объявления на сайте (можно указать несколько значений через запятую)")] = None,
        updated_at_from: Annotated[Optional[StrictStr], Field(description="Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD")] = None,
        category: Annotated[Optional[StrictInt], Field(description="Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение информации по объявлениям

        Возвращает список объявлений авторизованного пользователя - статус, категорию и ссылку на сайте. **Внимание! В настоящий момент этот метод не работает с объявлениями [сотрудников](https://pro.avito.ru/employees).** Он позволяет получить объявления только для пользователя, который указан владельцем этого объявления. В случае сотрудника это будет главный аккаунт компании, для авторизованного сотрудника вернётся пустой список объявлений. 

        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param per_page: Количество записей на странице (целое число больше 0 и меньше 100)
        :type per_page: int
        :param page: Номер страницы (целое число больше 0)
        :type page: int
        :param status: Статус объявления на сайте (можно указать несколько значений через запятую)
        :type status: str
        :param updated_at_from: Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD
        :type updated_at_from: str
        :param category: Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml) 
        :type category: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_info_serialize(
            authorization=authorization,
            per_page=per_page,
            page=page,
            status=status,
            updated_at_from=updated_at_from,
            category=category,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ItemsInfoWithCategoryAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_info_serialize(
        self,
        authorization,
        per_page,
        page,
        status,
        updated_at_from,
        category,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if updated_at_from is not None:
            
            _query_params.append(('updatedAtFrom', updated_at_from))
            
        if category is not None:
            
            _query_params.append(('category', category))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/core/v1/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def item_analytics(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        analytics_request: AnalyticsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AnalyticsResponse:
        """Получение статистических показателей по профилю

        Получение статистических показателей по профилю. ### Группировки показателей Используйте группировки, чтобы получать конкретную статистику.  Например, можете запросить только общие значения показателей, а если нужны подробности, — значения показателей по каждому объявлению или за определённый период. Доступные группировки:    - **totals** — по общему значению показателя за определённый период, без детализации;   - **item** — по объявлениям;   - **day** — по дням;   - **week** — по неделям;   - **month** — по месяцам.   ### Доступные показатели по объявлениям #### Основные    - **views** - Просмотры. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **contacts** - Контакты. Количество пользователей, которые посмотрели ваш номер, написали в чат или откликнулись на скидку после рассылки. Несколько контактов за сутки от одного пользователя считаются как один.     - **contactsShowPhone** - Посмотрели телефон. Количество пользователей, которые посмотрели ваш телефон или нажали «Позвонить». Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsMessenger** - Написали в чат. Количество пользователей, которые написали вам. Несколько чатов за сутки от одного пользователя считаются как один.     - **contactsShowPhoneAndMessenger** - Посмотрели телефон и написали в чат. Количество пользователей, которые и посмотрели ваш телефон, и написали в чат. Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsSbcDiscount** - Откликнулись на скидку в чате. Количество пользователей, которые приняли ваше спецпредложение после рассылки.   - **viewsToContactsConversion** - Конверсия из просмотров в контакты. Процент пользователей, которые после перехода в объявление посмотрели ваш телефон или написали в чат.   - **favorites** - Добавили в избранное. Сколько раз объявление добавили в избранное.   - **averageViewCost** - Средняя цена просмотра. Расходы на размещение и продвижение объявлений делятся на число просмотров.   - **averageContactCost** - Средняя цена контакта. Расходы на размещение и продвижение объявлений делятся на число контактов.   - **impressions** - Показы. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **impressionsToViewsConversion** - Конверсия из показов в просмотры. Процент пользователей, которые перешли в объявление после того, как оно показалось в результатах поиска и рекомендациях.   #### Целевые действия    - **clickPackages** - Целевые просмотры. Просмотры, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   - **jobContacts** - Отклики на вакансии. Отклики, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   #### Заказы с Авито Доставкой    - **viewsToOrderedItemsConversion** - Конверсия из просмотров в заказанные товары. Процент пользователей, которые после перехода в объявление заказали товар.   - **orderedItems** - Заказано товаров. Количество товаров, которые заказали с Авито Доставкой.   - **orderedItemsPrice** - Стоимость заказанных товаров в копейках. Общая стоимость заказов. Это сумма, которую вы получите на руки, если клиенты примут заказы.   - **deliveredItems** - Доставлено товаров. Количество товаров, которые заказали с Авито Доставкой и уже приняли.   - **deliveredItemsPrice** - Стоимость доставленных товаров в копейках. Общая стоимость заказов, которые покупатели приняли. Это сумма, которую вы получаете на руки.   #### Посуточная аренда    - **bookingPlacedCount** - Получено заявок. Общее количество заявок на бронирование   - **bookingPlacedPrice** - Стоимость полученных заявок в копейках. Общая стоимость бронирований. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingApprovedCount** - Подтверждено заявок. Количество заявок на бронирование, которые вы подтвердили.   - **bookingApprovedPrice** - Стоимость подтвержденных заявок в копейках. Общая стоимость бронирований, которые вы подтвердили. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingAcceptedCount** - Заявки с заселением. Количество бронирований, по которым заселились гости. Заселение засчитывается в 15:00 по Москве на следующий день после заезда.   - **bookingAcceptedPrice** - Стоимость заявок с заселением в копейках. Общая стоимость бронирований, по которым заселились гости. Это сумма, которую вы получаете на руки.   #### Расходы    - **allSpending** - Все расходы в копейках. Сколько всего денег и бонусов вы потратили на объявления.     - **spending** - Расходы на объявления в копейках. Сколько денег вы потратили на размещение, продвижение, целевые действия и комиссию.       - **presenceSpending** - Расходы на размещение и целевые действия в копейках. Сколько денег вы потратили на размещения и целевые действия — просмотры, чаты, звонки и отклики.       - **promoSpending** - Расходы на продвижение в копейках. Сколько денег вы потратили на продвижение и на услуги, которые влияют на внешний вид объявления.       - **restSpending** - Остальные расходы в копейках. Сколько денег вы потратили на чат-ботов и услуги, которые система не смогла распознать.       - **commission** - Комиссия в копейках. Какую комиссию вы заплатили за заказы с Авито Доставкой, которые приняли покупатели, а также за бронирования жилья.     - **spendingBonus** - Списано бонусов на объявления. Сколько бонусов вы потратили на размещение, продвижение, целевые действия и комиссию.   #### Количество объявлений за период    - **activeItems** - Активные объявления. Объявления, которые прошли проверку и появились в поиске.             - **newActiveItems** - Новые и опубликованные заново объявления. Сколько объявлений опубликовано впервые или повторно.     - **oldActiveItems** - Активны с прошлого периода. Сколько объявлений остаются опубликованными с предыдущего периода.   ### Примечания    * Из ручки возвращается не более чем по 1000 сущностей. Вы можете использовать поля запроса limit и offset для регулировки выбранного диапазона.   * Глубина данных статистики такого запроса ограничена 270 днями.   * В случае недоступности метрики для пользователя она не приходит в ответе.    * Система позволяет делать не более одного запроса в минуту на данный метод. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param analytics_request: (required)
        :type analytics_request: AnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_analytics_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            analytics_request=analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def item_analytics_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        analytics_request: AnalyticsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AnalyticsResponse]:
        """Получение статистических показателей по профилю

        Получение статистических показателей по профилю. ### Группировки показателей Используйте группировки, чтобы получать конкретную статистику.  Например, можете запросить только общие значения показателей, а если нужны подробности, — значения показателей по каждому объявлению или за определённый период. Доступные группировки:    - **totals** — по общему значению показателя за определённый период, без детализации;   - **item** — по объявлениям;   - **day** — по дням;   - **week** — по неделям;   - **month** — по месяцам.   ### Доступные показатели по объявлениям #### Основные    - **views** - Просмотры. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **contacts** - Контакты. Количество пользователей, которые посмотрели ваш номер, написали в чат или откликнулись на скидку после рассылки. Несколько контактов за сутки от одного пользователя считаются как один.     - **contactsShowPhone** - Посмотрели телефон. Количество пользователей, которые посмотрели ваш телефон или нажали «Позвонить». Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsMessenger** - Написали в чат. Количество пользователей, которые написали вам. Несколько чатов за сутки от одного пользователя считаются как один.     - **contactsShowPhoneAndMessenger** - Посмотрели телефон и написали в чат. Количество пользователей, которые и посмотрели ваш телефон, и написали в чат. Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsSbcDiscount** - Откликнулись на скидку в чате. Количество пользователей, которые приняли ваше спецпредложение после рассылки.   - **viewsToContactsConversion** - Конверсия из просмотров в контакты. Процент пользователей, которые после перехода в объявление посмотрели ваш телефон или написали в чат.   - **favorites** - Добавили в избранное. Сколько раз объявление добавили в избранное.   - **averageViewCost** - Средняя цена просмотра. Расходы на размещение и продвижение объявлений делятся на число просмотров.   - **averageContactCost** - Средняя цена контакта. Расходы на размещение и продвижение объявлений делятся на число контактов.   - **impressions** - Показы. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **impressionsToViewsConversion** - Конверсия из показов в просмотры. Процент пользователей, которые перешли в объявление после того, как оно показалось в результатах поиска и рекомендациях.   #### Целевые действия    - **clickPackages** - Целевые просмотры. Просмотры, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   - **jobContacts** - Отклики на вакансии. Отклики, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   #### Заказы с Авито Доставкой    - **viewsToOrderedItemsConversion** - Конверсия из просмотров в заказанные товары. Процент пользователей, которые после перехода в объявление заказали товар.   - **orderedItems** - Заказано товаров. Количество товаров, которые заказали с Авито Доставкой.   - **orderedItemsPrice** - Стоимость заказанных товаров в копейках. Общая стоимость заказов. Это сумма, которую вы получите на руки, если клиенты примут заказы.   - **deliveredItems** - Доставлено товаров. Количество товаров, которые заказали с Авито Доставкой и уже приняли.   - **deliveredItemsPrice** - Стоимость доставленных товаров в копейках. Общая стоимость заказов, которые покупатели приняли. Это сумма, которую вы получаете на руки.   #### Посуточная аренда    - **bookingPlacedCount** - Получено заявок. Общее количество заявок на бронирование   - **bookingPlacedPrice** - Стоимость полученных заявок в копейках. Общая стоимость бронирований. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingApprovedCount** - Подтверждено заявок. Количество заявок на бронирование, которые вы подтвердили.   - **bookingApprovedPrice** - Стоимость подтвержденных заявок в копейках. Общая стоимость бронирований, которые вы подтвердили. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingAcceptedCount** - Заявки с заселением. Количество бронирований, по которым заселились гости. Заселение засчитывается в 15:00 по Москве на следующий день после заезда.   - **bookingAcceptedPrice** - Стоимость заявок с заселением в копейках. Общая стоимость бронирований, по которым заселились гости. Это сумма, которую вы получаете на руки.   #### Расходы    - **allSpending** - Все расходы в копейках. Сколько всего денег и бонусов вы потратили на объявления.     - **spending** - Расходы на объявления в копейках. Сколько денег вы потратили на размещение, продвижение, целевые действия и комиссию.       - **presenceSpending** - Расходы на размещение и целевые действия в копейках. Сколько денег вы потратили на размещения и целевые действия — просмотры, чаты, звонки и отклики.       - **promoSpending** - Расходы на продвижение в копейках. Сколько денег вы потратили на продвижение и на услуги, которые влияют на внешний вид объявления.       - **restSpending** - Остальные расходы в копейках. Сколько денег вы потратили на чат-ботов и услуги, которые система не смогла распознать.       - **commission** - Комиссия в копейках. Какую комиссию вы заплатили за заказы с Авито Доставкой, которые приняли покупатели, а также за бронирования жилья.     - **spendingBonus** - Списано бонусов на объявления. Сколько бонусов вы потратили на размещение, продвижение, целевые действия и комиссию.   #### Количество объявлений за период    - **activeItems** - Активные объявления. Объявления, которые прошли проверку и появились в поиске.             - **newActiveItems** - Новые и опубликованные заново объявления. Сколько объявлений опубликовано впервые или повторно.     - **oldActiveItems** - Активны с прошлого периода. Сколько объявлений остаются опубликованными с предыдущего периода.   ### Примечания    * Из ручки возвращается не более чем по 1000 сущностей. Вы можете использовать поля запроса limit и offset для регулировки выбранного диапазона.   * Глубина данных статистики такого запроса ограничена 270 днями.   * В случае недоступности метрики для пользователя она не приходит в ответе.    * Система позволяет делать не более одного запроса в минуту на данный метод. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param analytics_request: (required)
        :type analytics_request: AnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_analytics_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            analytics_request=analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def item_analytics_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        analytics_request: AnalyticsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение статистических показателей по профилю

        Получение статистических показателей по профилю. ### Группировки показателей Используйте группировки, чтобы получать конкретную статистику.  Например, можете запросить только общие значения показателей, а если нужны подробности, — значения показателей по каждому объявлению или за определённый период. Доступные группировки:    - **totals** — по общему значению показателя за определённый период, без детализации;   - **item** — по объявлениям;   - **day** — по дням;   - **week** — по неделям;   - **month** — по месяцам.   ### Доступные показатели по объявлениям #### Основные    - **views** - Просмотры. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **contacts** - Контакты. Количество пользователей, которые посмотрели ваш номер, написали в чат или откликнулись на скидку после рассылки. Несколько контактов за сутки от одного пользователя считаются как один.     - **contactsShowPhone** - Посмотрели телефон. Количество пользователей, которые посмотрели ваш телефон или нажали «Позвонить». Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsMessenger** - Написали в чат. Количество пользователей, которые написали вам. Несколько чатов за сутки от одного пользователя считаются как один.     - **contactsShowPhoneAndMessenger** - Посмотрели телефон и написали в чат. Количество пользователей, которые и посмотрели ваш телефон, и написали в чат. Несколько таких действий за сутки от одного пользователя считаются как один.     - **contactsSbcDiscount** - Откликнулись на скидку в чате. Количество пользователей, которые приняли ваше спецпредложение после рассылки.   - **viewsToContactsConversion** - Конверсия из просмотров в контакты. Процент пользователей, которые после перехода в объявление посмотрели ваш телефон или написали в чат.   - **favorites** - Добавили в избранное. Сколько раз объявление добавили в избранное.   - **averageViewCost** - Средняя цена просмотра. Расходы на размещение и продвижение объявлений делятся на число просмотров.   - **averageContactCost** - Средняя цена контакта. Расходы на размещение и продвижение объявлений делятся на число контактов.   - **impressions** - Показы. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.   - **impressionsToViewsConversion** - Конверсия из показов в просмотры. Процент пользователей, которые перешли в объявление после того, как оно показалось в результатах поиска и рекомендациях.   #### Целевые действия    - **clickPackages** - Целевые просмотры. Просмотры, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   - **jobContacts** - Отклики на вакансии. Отклики, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).   #### Заказы с Авито Доставкой    - **viewsToOrderedItemsConversion** - Конверсия из просмотров в заказанные товары. Процент пользователей, которые после перехода в объявление заказали товар.   - **orderedItems** - Заказано товаров. Количество товаров, которые заказали с Авито Доставкой.   - **orderedItemsPrice** - Стоимость заказанных товаров в копейках. Общая стоимость заказов. Это сумма, которую вы получите на руки, если клиенты примут заказы.   - **deliveredItems** - Доставлено товаров. Количество товаров, которые заказали с Авито Доставкой и уже приняли.   - **deliveredItemsPrice** - Стоимость доставленных товаров в копейках. Общая стоимость заказов, которые покупатели приняли. Это сумма, которую вы получаете на руки.   #### Посуточная аренда    - **bookingPlacedCount** - Получено заявок. Общее количество заявок на бронирование   - **bookingPlacedPrice** - Стоимость полученных заявок в копейках. Общая стоимость бронирований. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingApprovedCount** - Подтверждено заявок. Количество заявок на бронирование, которые вы подтвердили.   - **bookingApprovedPrice** - Стоимость подтвержденных заявок в копейках. Общая стоимость бронирований, которые вы подтвердили. Это сумма, которую вы получите на руки, если гости заселятся.   - **bookingAcceptedCount** - Заявки с заселением. Количество бронирований, по которым заселились гости. Заселение засчитывается в 15:00 по Москве на следующий день после заезда.   - **bookingAcceptedPrice** - Стоимость заявок с заселением в копейках. Общая стоимость бронирований, по которым заселились гости. Это сумма, которую вы получаете на руки.   #### Расходы    - **allSpending** - Все расходы в копейках. Сколько всего денег и бонусов вы потратили на объявления.     - **spending** - Расходы на объявления в копейках. Сколько денег вы потратили на размещение, продвижение, целевые действия и комиссию.       - **presenceSpending** - Расходы на размещение и целевые действия в копейках. Сколько денег вы потратили на размещения и целевые действия — просмотры, чаты, звонки и отклики.       - **promoSpending** - Расходы на продвижение в копейках. Сколько денег вы потратили на продвижение и на услуги, которые влияют на внешний вид объявления.       - **restSpending** - Остальные расходы в копейках. Сколько денег вы потратили на чат-ботов и услуги, которые система не смогла распознать.       - **commission** - Комиссия в копейках. Какую комиссию вы заплатили за заказы с Авито Доставкой, которые приняли покупатели, а также за бронирования жилья.     - **spendingBonus** - Списано бонусов на объявления. Сколько бонусов вы потратили на размещение, продвижение, целевые действия и комиссию.   #### Количество объявлений за период    - **activeItems** - Активные объявления. Объявления, которые прошли проверку и появились в поиске.             - **newActiveItems** - Новые и опубликованные заново объявления. Сколько объявлений опубликовано впервые или повторно.     - **oldActiveItems** - Активны с прошлого периода. Сколько объявлений остаются опубликованными с предыдущего периода.   ### Примечания    * Из ручки возвращается не более чем по 1000 сущностей. Вы можете использовать поля запроса limit и offset для регулировки выбранного диапазона.   * Глубина данных статистики такого запроса ограничена 270 днями.   * В случае недоступности метрики для пользователя она не приходит в ответе.    * Система позволяет делать не более одного запроса в минуту на данный метод. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param analytics_request: (required)
        :type analytics_request: AnalyticsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_analytics_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            analytics_request=analytics_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AnalyticsResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _item_analytics_serialize(
        self,
        user_id,
        authorization,
        content_type,
        analytics_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if analytics_request is not None:
            _body_params = analytics_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/stats/v2/accounts/{user_id}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def item_stats_shallow(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        statistics_shallow_request_body: Annotated[Optional[StatisticsShallowRequestBody], Field(description="Набор параметров в теле запроса.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StatisticsResponse:
        """Получение статистики по списку объявлений

        Получение счетчиков по переданному списку объявлений пользователя.  **Внимание:** в запросе может быть передано не более 200 идентификаторов объявлений.  **Внимание:** глубина такого запроса ограничена 270 днями.  ### Счетчики * ~~views - общее число просмотров объявления;~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqViews. * uniqViews - число уникальных пользователей, просмотревших объявление; * ~~contacts - число контактов [1];~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqContacts. * uniqContacts - число уникальных пользователей, совершивших контакты [1]; * ~~favorites - число добавлений объявления в \"избранное\";~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqFavorites. * uniqFavorites - число уникальных пользователей, добавивших объявление в \"избранное\".  ### Группировка счетчиков Счетчики могут быть сгруппированы [2] по: * дням; * неделям - в поле `date` соответствующей структуры будет первый день недели; * месяцам - в поле `date` соответствующей структуры будет первый день месяца.  #### Период группировки Период группировки передается в теле запроса в поле `periodGrouping`. Доступные значения этого поля: * \"day\" (по умолчанию) - без группировки; * \"week\" - суммирование счетчиков за неделю; * \"month\" - суммирование счетчиков за месяц.  ### Примечания * [1]: Под контактом понимаются: запросы телефона продавца, начатый чат с продавцом по конкретному объявлению, отклик на резюме и пр. * [2]: Группировка уникальных пользователей происходит только в рамках одного дня. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param statistics_shallow_request_body: Набор параметров в теле запроса.
        :type statistics_shallow_request_body: StatisticsShallowRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_stats_shallow_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            statistics_shallow_request_body=statistics_shallow_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatisticsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def item_stats_shallow_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        statistics_shallow_request_body: Annotated[Optional[StatisticsShallowRequestBody], Field(description="Набор параметров в теле запроса.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StatisticsResponse]:
        """Получение статистики по списку объявлений

        Получение счетчиков по переданному списку объявлений пользователя.  **Внимание:** в запросе может быть передано не более 200 идентификаторов объявлений.  **Внимание:** глубина такого запроса ограничена 270 днями.  ### Счетчики * ~~views - общее число просмотров объявления;~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqViews. * uniqViews - число уникальных пользователей, просмотревших объявление; * ~~contacts - число контактов [1];~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqContacts. * uniqContacts - число уникальных пользователей, совершивших контакты [1]; * ~~favorites - число добавлений объявления в \"избранное\";~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqFavorites. * uniqFavorites - число уникальных пользователей, добавивших объявление в \"избранное\".  ### Группировка счетчиков Счетчики могут быть сгруппированы [2] по: * дням; * неделям - в поле `date` соответствующей структуры будет первый день недели; * месяцам - в поле `date` соответствующей структуры будет первый день месяца.  #### Период группировки Период группировки передается в теле запроса в поле `periodGrouping`. Доступные значения этого поля: * \"day\" (по умолчанию) - без группировки; * \"week\" - суммирование счетчиков за неделю; * \"month\" - суммирование счетчиков за месяц.  ### Примечания * [1]: Под контактом понимаются: запросы телефона продавца, начатый чат с продавцом по конкретному объявлению, отклик на резюме и пр. * [2]: Группировка уникальных пользователей происходит только в рамках одного дня. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param statistics_shallow_request_body: Набор параметров в теле запроса.
        :type statistics_shallow_request_body: StatisticsShallowRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_stats_shallow_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            statistics_shallow_request_body=statistics_shallow_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatisticsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def item_stats_shallow_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Идентификатор пользователя (клиента)")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        statistics_shallow_request_body: Annotated[Optional[StatisticsShallowRequestBody], Field(description="Набор параметров в теле запроса.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение статистики по списку объявлений

        Получение счетчиков по переданному списку объявлений пользователя.  **Внимание:** в запросе может быть передано не более 200 идентификаторов объявлений.  **Внимание:** глубина такого запроса ограничена 270 днями.  ### Счетчики * ~~views - общее число просмотров объявления;~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqViews. * uniqViews - число уникальных пользователей, просмотревших объявление; * ~~contacts - число контактов [1];~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqContacts. * uniqContacts - число уникальных пользователей, совершивших контакты [1]; * ~~favorites - число добавлений объявления в \"избранное\";~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqFavorites. * uniqFavorites - число уникальных пользователей, добавивших объявление в \"избранное\".  ### Группировка счетчиков Счетчики могут быть сгруппированы [2] по: * дням; * неделям - в поле `date` соответствующей структуры будет первый день недели; * месяцам - в поле `date` соответствующей структуры будет первый день месяца.  #### Период группировки Период группировки передается в теле запроса в поле `periodGrouping`. Доступные значения этого поля: * \"day\" (по умолчанию) - без группировки; * \"week\" - суммирование счетчиков за неделю; * \"month\" - суммирование счетчиков за месяц.  ### Примечания * [1]: Под контактом понимаются: запросы телефона продавца, начатый чат с продавцом по конкретному объявлению, отклик на резюме и пр. * [2]: Группировка уникальных пользователей происходит только в рамках одного дня. 

        :param user_id: Идентификатор пользователя (клиента) (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param statistics_shallow_request_body: Набор параметров в теле запроса.
        :type statistics_shallow_request_body: StatisticsShallowRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._item_stats_shallow_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            statistics_shallow_request_body=statistics_shallow_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StatisticsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _item_stats_shallow_serialize(
        self,
        user_id,
        authorization,
        content_type,
        statistics_shallow_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if statistics_shallow_request_body is not None:
            _body_params = statistics_shallow_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/stats/v1/accounts/{user_id}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_calls_stats(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        calls_stats_request: CallsStatsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CallsStatsResponse:
        """Получение статистики по звонкам

        Получение агрегированной статистики звонков, полученных пользователем 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param calls_stats_request: (required)
        :type calls_stats_request: CallsStatsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_calls_stats_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            calls_stats_request=calls_stats_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CallsStatsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_calls_stats_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        calls_stats_request: CallsStatsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CallsStatsResponse]:
        """Получение статистики по звонкам

        Получение агрегированной статистики звонков, полученных пользователем 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param calls_stats_request: (required)
        :type calls_stats_request: CallsStatsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_calls_stats_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            calls_stats_request=calls_stats_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CallsStatsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_calls_stats_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        content_type: Annotated[StrictStr, Field(description="Тип данных запроса")],
        calls_stats_request: CallsStatsRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение статистики по звонкам

        Получение агрегированной статистики звонков, полученных пользователем 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param content_type: Тип данных запроса (required)
        :type content_type: str
        :param calls_stats_request: (required)
        :type calls_stats_request: CallsStatsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_calls_stats_serialize(
            user_id=user_id,
            authorization=authorization,
            content_type=content_type,
            calls_stats_request=calls_stats_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CallsStatsResponse",
            '400': "BadRequestError",
            '401': "AuthError",
            '404': "NotFoundError",
            '500': "ServiceError",
            '503': "ServiceUnavailableError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_calls_stats_serialize(
        self,
        user_id,
        authorization,
        content_type,
        calls_stats_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if calls_stats_request is not None:
            _body_params = calls_stats_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/core/v1/accounts/{user_id}/calls/stats/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_item_vas(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        vas_id_request_body: Optional[VasIdRequestBody] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VasApplyAvito:
        """Применение дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение дополнительной услуги к объявлению, в ответе возвращает данные о примененной услуге и сумму списания. [Более подробная информация по дополнительным услугам](https://support.avito.ru/sections/200009758)  **Внимание:** получение ошибки при выполнении этой операции не означает, что услуга точно не была куплена. В этом случае рекомендуется подождать несколько минут и проверить, что услуга отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param vas_id_request_body:
        :type vas_id_request_body: VasIdRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            vas_id_request_body=vas_id_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasApplyAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_item_vas_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        vas_id_request_body: Optional[VasIdRequestBody] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VasApplyAvito]:
        """Применение дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение дополнительной услуги к объявлению, в ответе возвращает данные о примененной услуге и сумму списания. [Более подробная информация по дополнительным услугам](https://support.avito.ru/sections/200009758)  **Внимание:** получение ошибки при выполнении этой операции не означает, что услуга точно не была куплена. В этом случае рекомендуется подождать несколько минут и проверить, что услуга отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param vas_id_request_body:
        :type vas_id_request_body: VasIdRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            vas_id_request_body=vas_id_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasApplyAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_item_vas_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        vas_id_request_body: Optional[VasIdRequestBody] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Применение дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение дополнительной услуги к объявлению, в ответе возвращает данные о примененной услуге и сумму списания. [Более подробная информация по дополнительным услугам](https://support.avito.ru/sections/200009758)  **Внимание:** получение ошибки при выполнении этой операции не означает, что услуга точно не была куплена. В этом случае рекомендуется подождать несколько минут и проверить, что услуга отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param vas_id_request_body:
        :type vas_id_request_body: VasIdRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            vas_id_request_body=vas_id_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasApplyAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_item_vas_serialize(
        self,
        user_id,
        item_id,
        authorization,
        vas_id_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        if item_id is not None:
            _path_params['item_id'] = item_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if vas_id_request_body is not None:
            _body_params = vas_id_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/core/v1/accounts/{user_id}/items/{item_id}/vas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_item_vas_package_v2(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        package_id_request_body_v2: Optional[PackageIdRequestBodyV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VasAmountAvito:
        """Применение пакета дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение пакета дополнительных услуг к объявлению, в ответе возвращает сумму списания.  **Внимание:** получение ошибки при выполнении этой операции не означает, что пакет точно не была куплен. В этом случае рекомендуется подождать несколько минут и проверить, что пакет отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param package_id_request_body_v2:
        :type package_id_request_body_v2: PackageIdRequestBodyV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_package_v2_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            package_id_request_body_v2=package_id_request_body_v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasAmountAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_item_vas_package_v2_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        package_id_request_body_v2: Optional[PackageIdRequestBodyV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VasAmountAvito]:
        """Применение пакета дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение пакета дополнительных услуг к объявлению, в ответе возвращает сумму списания.  **Внимание:** получение ошибки при выполнении этой операции не означает, что пакет точно не была куплен. В этом случае рекомендуется подождать несколько минут и проверить, что пакет отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param package_id_request_body_v2:
        :type package_id_request_body_v2: PackageIdRequestBodyV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_package_v2_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            package_id_request_body_v2=package_id_request_body_v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasAmountAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_item_vas_package_v2_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        item_id: Annotated[StrictInt, Field(description="Идентификатор объявления на сайте")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        package_id_request_body_v2: Optional[PackageIdRequestBodyV2] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Применение пакета дополнительных услуг

        **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`  Применение пакета дополнительных услуг к объявлению, в ответе возвращает сумму списания.  **Внимание:** получение ошибки при выполнении этой операции не означает, что пакет точно не была куплен. В этом случае рекомендуется подождать несколько минут и проверить, что пакет отсутствует в списке применённых, а только затем повторить попытку. 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param item_id: Идентификатор объявления на сайте (required)
        :type item_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param package_id_request_body_v2:
        :type package_id_request_body_v2: PackageIdRequestBodyV2
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_item_vas_package_v2_serialize(
            user_id=user_id,
            item_id=item_id,
            authorization=authorization,
            package_id_request_body_v2=package_id_request_body_v2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasAmountAvito",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_item_vas_package_v2_serialize(
        self,
        user_id,
        item_id,
        authorization,
        package_id_request_body_v2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        if item_id is not None:
            _path_params['item_id'] = item_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if package_id_request_body_v2 is not None:
            _body_params = package_id_request_body_v2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/core/v2/accounts/{user_id}/items/{item_id}/vas_packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def vas_prices(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        prices_item_ids_request_body: Annotated[Optional[PricesItemIdsRequestBody], Field(description="Набор идентификаторов объявлений на сайте")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VasPrices200Response:
        """Получение информации о стоимости услуг продвижения и доступных значках

        Возвращает в ответ список объектов со следующей структурой: - `itemId` – идентификатор объявления - `vas` – список объектов, которые содержат информацию о стоимости дополнительных услуг и пакетов дополнительных услуг для каждого объявления. Структура объекта:   - `slug` – идентификатор услуги или пакета услуг:     - `highlight` — [услуга продвижения \"Выделить\"](https://support.avito.ru/articles/200026858)     - `xl` – [услуга продвижения \"XL-объявление\"](https://support.avito.ru/articles/685)     - `stickerpack_x1` – [1 значок на XL-объявлении](https://support.avito.ru/articles/2450)      - `stickerpack_x2` – [2 значка на XL-объявлении](https://support.avito.ru/articles/2450)     - `stickerpack_x3` – [3 значка на XL-объявлении](https://support.avito.ru/articles/2450)      - `x2_1` – [пакет \"до 2 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x2_7` – [пакет \"до 2 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x5_1` – [пакет \"до 5 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x5_7` – [пакет \"до 5 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x10_1` – [пакет \"до 10 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x10_7` – [пакет \"до 10 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x15_1` – [пакет \"до 15 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x15_7` – [пакет \"до 15 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x20_1` – [пакет \"до 20 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x20_7` – [пакет \"до 20 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)    - `price` – цена в рублях с учетом скидки    - `priceOld` – цена в рублях до применения скидки  - `stickers` – список объектов которые содержат доступные для объявления  [значки](https://support.avito.ru/articles/2450)   - `id` – идентификатор значка   - `title` – название значка   - `description` – описание значка 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param prices_item_ids_request_body: Набор идентификаторов объявлений на сайте
        :type prices_item_ids_request_body: PricesItemIdsRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vas_prices_serialize(
            user_id=user_id,
            authorization=authorization,
            prices_item_ids_request_body=prices_item_ids_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasPrices200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def vas_prices_with_http_info(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        prices_item_ids_request_body: Annotated[Optional[PricesItemIdsRequestBody], Field(description="Набор идентификаторов объявлений на сайте")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VasPrices200Response]:
        """Получение информации о стоимости услуг продвижения и доступных значках

        Возвращает в ответ список объектов со следующей структурой: - `itemId` – идентификатор объявления - `vas` – список объектов, которые содержат информацию о стоимости дополнительных услуг и пакетов дополнительных услуг для каждого объявления. Структура объекта:   - `slug` – идентификатор услуги или пакета услуг:     - `highlight` — [услуга продвижения \"Выделить\"](https://support.avito.ru/articles/200026858)     - `xl` – [услуга продвижения \"XL-объявление\"](https://support.avito.ru/articles/685)     - `stickerpack_x1` – [1 значок на XL-объявлении](https://support.avito.ru/articles/2450)      - `stickerpack_x2` – [2 значка на XL-объявлении](https://support.avito.ru/articles/2450)     - `stickerpack_x3` – [3 значка на XL-объявлении](https://support.avito.ru/articles/2450)      - `x2_1` – [пакет \"до 2 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x2_7` – [пакет \"до 2 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x5_1` – [пакет \"до 5 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x5_7` – [пакет \"до 5 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x10_1` – [пакет \"до 10 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x10_7` – [пакет \"до 10 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x15_1` – [пакет \"до 15 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x15_7` – [пакет \"до 15 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x20_1` – [пакет \"до 20 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x20_7` – [пакет \"до 20 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)    - `price` – цена в рублях с учетом скидки    - `priceOld` – цена в рублях до применения скидки  - `stickers` – список объектов которые содержат доступные для объявления  [значки](https://support.avito.ru/articles/2450)   - `id` – идентификатор значка   - `title` – название значка   - `description` – описание значка 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param prices_item_ids_request_body: Набор идентификаторов объявлений на сайте
        :type prices_item_ids_request_body: PricesItemIdsRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vas_prices_serialize(
            user_id=user_id,
            authorization=authorization,
            prices_item_ids_request_body=prices_item_ids_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasPrices200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def vas_prices_without_preload_content(
        self,
        user_id: Annotated[StrictInt, Field(description="Номер пользователя в Личном кабинете Авито")],
        authorization: Annotated[StrictStr, Field(description="Токен для авторизации")],
        prices_item_ids_request_body: Annotated[Optional[PricesItemIdsRequestBody], Field(description="Набор идентификаторов объявлений на сайте")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Получение информации о стоимости услуг продвижения и доступных значках

        Возвращает в ответ список объектов со следующей структурой: - `itemId` – идентификатор объявления - `vas` – список объектов, которые содержат информацию о стоимости дополнительных услуг и пакетов дополнительных услуг для каждого объявления. Структура объекта:   - `slug` – идентификатор услуги или пакета услуг:     - `highlight` — [услуга продвижения \"Выделить\"](https://support.avito.ru/articles/200026858)     - `xl` – [услуга продвижения \"XL-объявление\"](https://support.avito.ru/articles/685)     - `stickerpack_x1` – [1 значок на XL-объявлении](https://support.avito.ru/articles/2450)      - `stickerpack_x2` – [2 значка на XL-объявлении](https://support.avito.ru/articles/2450)     - `stickerpack_x3` – [3 значка на XL-объявлении](https://support.avito.ru/articles/2450)      - `x2_1` – [пакет \"до 2 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x2_7` – [пакет \"до 2 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x5_1` – [пакет \"до 5 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x5_7` – [пакет \"до 5 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x10_1` – [пакет \"до 10 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x10_7` – [пакет \"до 10 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x15_1` – [пакет \"до 15 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x15_7` – [пакет \"до 15 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)     - `x20_1` – [пакет \"до 20 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)     - `x20_7` – [пакет \"до 20 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)    - `price` – цена в рублях с учетом скидки    - `priceOld` – цена в рублях до применения скидки  - `stickers` – список объектов которые содержат доступные для объявления  [значки](https://support.avito.ru/articles/2450)   - `id` – идентификатор значка   - `title` – название значка   - `description` – описание значка 

        :param user_id: Номер пользователя в Личном кабинете Авито (required)
        :type user_id: int
        :param authorization: Токен для авторизации (required)
        :type authorization: str
        :param prices_item_ids_request_body: Набор идентификаторов объявлений на сайте
        :type prices_item_ids_request_body: PricesItemIdsRequestBody
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._vas_prices_serialize(
            user_id=user_id,
            authorization=authorization,
            prices_item_ids_request_body=prices_item_ids_request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VasPrices200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _vas_prices_serialize(
        self,
        user_id,
        authorization,
        prices_item_ids_request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['user_id'] = user_id
        # process the query parameters
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        # process the form parameters
        # process the body parameter
        if prices_item_ids_request_body is not None:
            _body_params = prices_item_ids_request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'AuthorizationCode', 
            'ClientCredentials'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/core/v1/accounts/{userId}/vas/prices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


