# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from avito_ads.models.analytics_request_filter import AnalyticsRequestFilter
from avito_ads.models.analytics_request_sort import AnalyticsRequestSort
from avito_ads.models.groupings import Groupings
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsRequest(BaseModel):
    """
    AnalyticsRequest
    """ # noqa: E501
    date_from: date = Field(description="Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику", alias="dateFrom")
    date_to: date = Field(description="Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику", alias="dateTo")
    filter: Optional[AnalyticsRequestFilter] = None
    grouping: Groupings
    limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(description="Инструмент пагинации для ограничения количества сущностей в response;")
    metrics: List[StrictStr] = Field(description="Набор доступных показателей, которые должны присутствовать в ответе")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(description="инструмент пагинации или смещение, с которого начинается выборка данных;")
    sort: Optional[AnalyticsRequestSort] = None
    __properties: ClassVar[List[str]] = ["dateFrom", "dateTo", "filter", "grouping", "limit", "metrics", "offset", "sort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        # set to None if filter (nullable) is None
        # and model_fields_set contains the field
        if self.filter is None and "filter" in self.model_fields_set:
            _dict['filter'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if sort (nullable) is None
        # and model_fields_set contains the field
        if self.sort is None and "sort" in self.model_fields_set:
            _dict['sort'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateFrom": obj.get("dateFrom"),
            "dateTo": obj.get("dateTo"),
            "filter": AnalyticsRequestFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "grouping": obj.get("grouping"),
            "limit": obj.get("limit"),
            "metrics": obj.get("metrics"),
            "offset": obj.get("offset"),
            "sort": AnalyticsRequestSort.from_dict(obj["sort"]) if obj.get("sort") is not None else None
        })
        return _obj


