# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_ads.models.info_vas import InfoVas
from typing import Optional, Set
from typing_extensions import Self

class ItemInfoAvito(BaseModel):
    """
    ItemInfoAvito
    """ # noqa: E501
    autoload_item_id: Optional[StrictStr] = Field(default=None, description="[Идентификатор объявления](https://autoload.avito.ru/format/realty/#Id) из файла автозагрузки")
    finish_time: Optional[datetime] = Field(default=None, description="Дата завершения объявления")
    start_time: Optional[datetime] = Field(default=None, description="Дата создания объявления")
    status: Optional[StrictStr] = Field(default=None, description="Статус объявления на сайте")
    url: Optional[StrictStr] = Field(default=None, description="URL-адрес объявления")
    vas: Optional[List[InfoVas]] = Field(default=None, description="Список примененных платных услуг")
    __properties: ClassVar[List[str]] = ["autoload_item_id", "finish_time", "start_time", "status", "url", "vas"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'removed', 'old', 'blocked', 'rejected', 'not_found', 'another_user']):
            raise ValueError("must be one of enum values ('active', 'removed', 'old', 'blocked', 'rejected', 'not_found', 'another_user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemInfoAvito from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vas (list)
        _items = []
        if self.vas:
            for _item_vas in self.vas:
                if _item_vas:
                    _items.append(_item_vas.to_dict())
            _dict['vas'] = _items
        # set to None if autoload_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.autoload_item_id is None and "autoload_item_id" in self.model_fields_set:
            _dict['autoload_item_id'] = None

        # set to None if finish_time (nullable) is None
        # and model_fields_set contains the field
        if self.finish_time is None and "finish_time" in self.model_fields_set:
            _dict['finish_time'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if vas (nullable) is None
        # and model_fields_set contains the field
        if self.vas is None and "vas" in self.model_fields_set:
            _dict['vas'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemInfoAvito from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoload_item_id": obj.get("autoload_item_id"),
            "finish_time": obj.get("finish_time"),
            "start_time": obj.get("start_time"),
            "status": obj.get("status"),
            "url": obj.get("url"),
            "vas": [InfoVas.from_dict(_item) for _item in obj["vas"]] if obj.get("vas") is not None else None
        })
        return _obj


