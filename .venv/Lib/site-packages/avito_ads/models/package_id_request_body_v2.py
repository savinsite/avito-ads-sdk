# coding: utf-8

"""
    Объявления

    API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class PackageIdRequestBodyV2(BaseModel):
    """
    PackageIdRequestBodyV2
    """ # noqa: E501
    package_id: StrictStr = Field(description="Идентификатор пакета услуг, возможные варианты значения: - `x2_1` - применение пакета До 2 раз больше просмотров на 1 день - `x2_7` - применение пакета До 2 раз больше просмотров на 7 дней - `x5_1` - применение пакета До 5 раз больше просмотров на 1 день - `x5_7` - применение пакета До 5 раз больше просмотров на 7 дней - `x10_1` - применение пакета До 10 раз больше просмотров на 1 день - `x10_7` - применение пакета До 10 раз больше просмотров на 7 дней  В некоторых регионах и категориях также доступны дополнительные варианты: - `x15_1` - применение пакета До 15 раз больше просмотров на 1 день - `x15_7` - применение пакета До 15 раз больше просмотров на 7 дней - `x20_1` - применение пакета До 20 раз больше просмотров на 1 день - `x20_7` - применение пакета До 20 раз больше просмотров на 7 дней  Если попытаться применить эти пакеты в недоступных для них регионе и категории, оплата не пройдёт. ")
    __properties: ClassVar[List[str]] = ["package_id"]

    @field_validator('package_id')
    def package_id_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['x2_1', 'x2_7', 'x5_1', 'x5_7', 'x10_1', 'x10_7', 'x15_1', 'x15_7', 'x20_1', 'x20_7']):
            raise ValueError("must be one of enum values ('x2_1', 'x2_7', 'x5_1', 'x5_7', 'x10_1', 'x10_7', 'x15_1', 'x15_7', 'x20_1', 'x20_7')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageIdRequestBodyV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageIdRequestBodyV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "package_id": obj.get("package_id")
        })
        return _obj


