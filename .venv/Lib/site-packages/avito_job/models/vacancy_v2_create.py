# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.age_criteria import AgeCriteria
from avito_job.models.apply_processing import ApplyProcessing
from avito_job.models.grade import Grade
from avito_job.models.medical_book_vacancy import MedicalBookVacancy
from avito_job.models.salary_detail import SalaryDetail
from avito_job.models.tools_availability import ToolsAvailability
from avito_job.models.vacancy_education_level import VacancyEducationLevel
from avito_job.models.vacancy_v2_create_contacts import VacancyV2CreateContacts
from avito_job.models.vacancy_v2_create_hierarchy import VacancyV2CreateHierarchy
from avito_job.models.vacancy_v2_create_location import VacancyV2CreateLocation
from avito_job.models.vacancy_v2_create_salary import VacancyV2CreateSalary
from typing import Optional, Set
from typing_extensions import Self

class VacancyV2Create(BaseModel):
    """
    VacancyV2Create
    """ # noqa: E501
    administrator_organization_type: Optional[StrictInt] = Field(default=None, description="Тип организации в которой предстоит работать кандидату. Используется для профессии Администратор <br> Получить актуальный список доступных значений можно из справочника `administrator_organization_type` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-admininstrator-organization-type.xml) объявлен устаревшим и более не будет использоваться.  <br> ")
    age: Optional[AgeCriteria] = None
    age_preferences: Optional[List[StrictStr]] = Field(default=None, description="Блок \"в том числе для кандидатов\" (массив строк)  Возможные значения элементов массива:   - \"olderThan45\" - старше 45 лет;   - \"olderThan14\" - от 14 лет;   - \"olderThan16\" - от 16 лет;   - \"withHealthProblems\" - с нарушениями здоровья;   - \"students\" - для студентов;   - \"pensioners\" - для пенсионеров. ")
    apply_processing: Optional[ApplyProcessing] = None
    billing_type: StrictStr = Field(description="Вариант платного размещения  Возможные значения:   - \"package\" - размещение объявления осуществляется только при наличии подходящего пакета размещения   - \"packageOrSingle\" - при наличии подходящего пакета оплата размещения объявления произойдет с него; если нет подходящего пакета, но достаточно денег на кошельке Авито, то произойдет разовое размещение ")
    bonuses: Optional[List[StrictStr]] = Field(default=None, description="Бонусы, которые компания предоставляет кандидатам")
    business_area: StrictInt = Field(description="Идентификатор сферы деятельности  <br> Получить актуальный список доступных значений можно из справочника `business_area` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-business-area.xml) объявлен устаревшим и более не будет использоваться.  <br> ")
    citizenship: Optional[List[StrictStr]] = Field(default=None, description="Гражданство кандидата.  Если выберите значение, в данных кандидата будет отметка, что кандидат соответствует этому критерию или нет.  Кандидаты не увидят этого в вакансии. ")
    construction_work_type: Optional[List[StrictStr]] = Field(default=None, description="С какими видами строительных или ремонтных работ предстоит столкнуться кандидату <br> Возможные значения элементов массива:   - \"paintingWorks\" - Малярные работы;   - \"wallCovering\" - Облицовка стен;   - \"tileWork\" - Работы с плиткой;   - \"mountingAndInstallation\" - Монтаж и установка;   - \"finishingWork\" - Отделочные работы;   - \"roofing\" - Кровельные работы;   - \"installationAndConfigurationOfEquipment\" - Монтаж и настройка оборудования;   - \"weldingWork\" - Сварочные работы;   - \"constructionOfFacades\" - Строительство фасадов;   - \"formingMaterials\" - Формовка материалов;   - \"concreteAndStoneWorks\" - Бетонные и каменные работы;   - \"repairWork\" - Ремонтные работы;   - \"other\" - Другие. ")
    contacts: Optional[VacancyV2CreateContacts] = None
    cuisine: Optional[List[StrictStr]] = Field(default=None, description="Блюда какой кухни предстоит готовить кандидату <br> Возможные значения элементов массива:   - \"russian\" - Русская;   - \"european\" - Европейская;   - \"caucasian\" - Кавказская;   - \"italian\" - Итальянская;   - \"japanese\" - Японская;   - \"turkish\" - Турецкая;   - \"other\" - Другая. ")
    delivery_method: Optional[List[StrictStr]] = Field(default=None, description="Способ доставки")
    description: StrictStr = Field(description="Описание вакансии (строка длиной от 1 до 5000 символов)  Можно использовать HTML-теги в тексте.  Поддерживаемые тэги - `p`, `ul`, `ol`, `li`, `br`, `strong`, `em` ")
    driving_experience: Optional[StrictStr] = Field(default=None, description="Стаж вождения")
    driving_license_category: Optional[List[StrictStr]] = Field(default=None, description="Категория прав")
    eatery_type: Optional[List[StrictStr]] = Field(default=None, description="Формат заведения общепита в котором предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cafe\" - Кафе;   - \"bar\" - Бар;   - \"fastFood\" - Фастфуд;   - \"restaurant\" - Ресторан;   - \"canteen\" - Столовая;   - \"bakery\" - Пекарня;   - \"other\" - Другой. ")
    education_level: Optional[VacancyEducationLevel] = None
    employment: StrictStr = Field(description="Занятость <br> Возможные значения:   - temporary - Временная   - full - Полная   - internship - Стажировка   - partial - Частичная  Если ничего не выбрать то будет автоматически проставляться в зависимости от графика работы:  При flexible и partTime, тип занятости - partial. ßДля всех остальных full. ")
    experience: StrictStr = Field(description="Опыт работы")
    facility_type: Optional[List[StrictStr]] = Field(default=None, description="Тип склада или производственной линии на которой предстоит работать кандидату <br> Возможные значения элементов массива:   - \"production\" - Производство;   - \"logisticsCenter\" - Логистический центр;   - \"warehouse\" - Склад;   - \"other\" - Другое. ")
    food_production_shop_type: Optional[List[StrictStr]] = Field(default=None, description="В каком цеху по приготовлению пищи предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cold\" - Холодный;   - \"hot\" - Горячий;   - \"confectionery\" - Кондитерский;   - \"preparation\" - Заготовочный;   - \"other\" - Другой. ")
    grade: Optional[Grade] = None
    hierarchy: Optional[VacancyV2CreateHierarchy] = None
    image_url: Optional[StrictStr] = Field(default=None, description="URL-адрес логотипа вакансии. Ссылка на файл должна быть прямой | (при переходе не открываются элементы другого сайта (логотипы, кнопки или другие детали интерфейса) и не запрашивается логин и пароль) и доступной для IP 185.89.12.0/22, 146.158.48.0/21, 185.79.237.224/28 и 87.245.204.32/28;")
    is_company_car: Optional[StrictBool] = Field(default=None, description="Предоставляет ли компания автомобиль")
    is_side_job: Optional[StrictBool] = Field(default=None, description="Подработка")
    location: VacancyV2CreateLocation
    medical_book: Optional[MedicalBookVacancy] = None
    medical_specialization: Optional[List[StrictStr]] = Field(default=None, description="Медицинская специализация (можно указать несколько значений через запятую) <br> см. названия специализаций в [ справочнике ](https://www.avito.st/s/openapi/catalog-medical-spec.xml) ")
    medical_specialization_ids: Optional[List[StrictInt]] = Field(default=None, description="Медицинская специализация (можно указать несколько значений) <br> Получить актуальный список доступных значений можно из справочника `medical_specialization` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). ")
    payout_frequency: Optional[StrictStr] = Field(default=None, description="Частота выплат <br> Возможные значения:   - \"dailyPay\" - Каждый день;   - \"biweeklyPay\" - Дважды в месяц;   - \"weeklyPay\" - Раз в неделю;   - \"thriceMonthlyPay\" - три раза в месяц;   - \"monthlyPay\" - Раз в месяц.  Для paid_period равным month и week недоступно для выбора dailyPay.  deprecated значение hourlyPay будет заменено на dailyPay ")
    profession: Optional[StrictInt] = Field(default=None, description="Название профессии <br> Получить актуальный список доступных значений можно из справочника `profession` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-profession.xml?v=5) объявлен устаревшим и более не будет использоваться. <br>")
    programs: Optional[List[StrictStr]] = Field(default=None, description="Блок участие вакансии в программах (массив строк)  Если у компании от лица которой создается вакансия нет всех необходимых разрешений на участие, программа у вакансии не будет включена.  Возможные значения элементов массива:   - \"chastyeVyplaty\" - Частые выплаты. ")
    registration_method: Optional[List[StrictStr]] = Field(default=None, description="Способ оформления (можно указать несколько значений через запятую) <br> Возможные значения: - contract - Трудовой договор - gph_ip - ГПХ с ИП - gph_self_employed - ГПХ с самозанятым - gph_individual - ГПХ с физическим лицом ")
    retail_equipment_type: Optional[List[StrictStr]] = Field(default=None, description="С каким оборудованием или ПО предстоит работать кандидату <br> Возможные значения элементов массива:   - \"cashRegisterAndPosTerminals\" - Касса и POS-терминалы;   - \"accountingSoftware\" - Программы учёта товаров. ")
    retail_shop_type: Optional[List[StrictStr]] = Field(default=None, description="Что продает магазин в котором предстоит работать кандидату <br> Возможные значения элементов массива:   - \"hypermarketOrSupermarket\" - Гипермаркет или супермаркет;   - \"grocery\" - Продуктовый;   - \"electronicsAndHouseholdAppliances\" - Электроника и бытовая техника;   - \"clothesAndShoes\" - Одежда и обувь;   - \"perfumesAndCosmetics\" - Парфюмерия и косметика;   - \"constructionAndHouseholdGoods\" - Строительство и хозтовары;   - \"childrenGoods\" - Детские товары;   - \"sportingGoods\" - Спортивные товары;   - \"petShop\" - Зоомагазин;   - \"pharmacy\" - Аптека;   - \"other\" - Другое. ")
    salary: Optional[VacancyV2CreateSalary] = None
    salary_detail: Optional[SalaryDetail] = None
    schedule: StrictStr = Field(description="Режим работы <br> Возможные значения:   - flyInFlyOut - Вахта   - fixed - Фиксированный   - flexible - Гибкий   - shift - Сменный  flyInFlyOut - Вахта, при выборе данного режима работы, адрес вакансии может быть только \"Город\", если адрес передается полноценный, то улица будет отрезана и адрес будет до \"Города\".  deprecated значения fiveDay, sixDay, partTime, fullDay и remote будут заменены на fixed ")
    shifts: Optional[List[StrictInt]] = Field(default=None, description="Смены <br> Получить актуальный список доступных значений можно из справочника `shifts` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Доступен только для следующих режимов работы (schedule): \"Сменный (shift)\",  \"Фиксированный (fixed)\" <br> Для режима работы (schedule) \"Фиксированный (fixed)\" доступны только значения показывающие отношение количества рабочих дней к выходным, например \"5/2\" ")
    title: StrictStr = Field(description="Название вакансии (строка длиной от 1 до 50 символов)")
    tools_availability: Optional[ToolsAvailability] = None
    vacancy_code: Optional[StrictStr] = Field(default=None, description="Внутренний идентификатор вакансии или номер заявки на подбор, максимум 150 символов")
    vehicle_type: Optional[StrictInt] = Field(default=None, description="На какой технике предстоит работать кандитату, от выбора техники зависит какие категории прав можно будет указать в вакансии <br> Получить актуальный список доступных значений можно из справочника `vehicle_type` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Статичный [справочник](https://www.avito.st/s/openapi/catalog-vehicle-type.xml) объявлен устаревшим и более не будет использоваться.  <br> Используется только для профессий   - Водитель пассажирского транспорта  - Водитель грузового транспорта  - Водитель спецтехники  - Машинист спецтехники <br> ")
    work_days_per_week: Optional[List[StrictInt]] = Field(default=None, description="Количество рабочих дней в неделю <br> Получить актуальный список доступных значений можно из справочника `work_days_per_week` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Доступен только для режима работы (schedule) равным \"Гибкий (flexible)\" ")
    work_format: Optional[List[StrictStr]] = Field(default=None, description="Блок \"Формат работы\" (массив строк)  Возможные значения элементов массива:   - \"office\" - В офисе или на объекте;   - \"remote\" - Удалённо;   - \"gibrid\" - Гибрид. ")
    work_hours_per_day: Optional[List[StrictInt]] = Field(default=None, description="Количество рабочих часов в день <br> Получить актуальный список доступных значений можно из справочника `work_hours_per_day` через метод [getDictByID](/api-catalog/job/documentation#operation/getDictByID). <br> Для режима работы (schedule) равным \"Вахта (flyInFlyOut)\" недоступны значения \"13–15 часов\", \"Больше 15 часов\"  <br> Для типа занятости (employment) равным \"Полная (full)\" недоступны значения \"До 4 часов\", \"4–5 часов\" <br> Для типов занятости (employment) равным \"Временная (temporary)\", \"Стажировка (internship)\", \"Частичная (partial)\" недоступно значение \"Больше 15 часов\" ")
    worker_class: Optional[List[StrictStr]] = Field(default=None, description="Предпочтительный разряд кандидата <br> Возможные значения элементов массива:   - \"1\" - Первый;   - \"2\" - Второй;   - \"3\" - Третий;   - \"4\" - Четвертый;   - \"5andHigher\" - Пятый и выше;   - \"notNeeded\" - Не требуется. ")
    __properties: ClassVar[List[str]] = ["administrator_organization_type", "age", "age_preferences", "apply_processing", "billing_type", "bonuses", "business_area", "citizenship", "construction_work_type", "contacts", "cuisine", "delivery_method", "description", "driving_experience", "driving_license_category", "eatery_type", "education_level", "employment", "experience", "facility_type", "food_production_shop_type", "grade", "hierarchy", "image_url", "is_company_car", "is_side_job", "location", "medical_book", "medical_specialization", "medical_specialization_ids", "payout_frequency", "profession", "programs", "registration_method", "retail_equipment_type", "retail_shop_type", "salary", "salary_detail", "schedule", "shifts", "title", "tools_availability", "vacancy_code", "vehicle_type", "work_days_per_week", "work_format", "work_hours_per_day", "worker_class"]

    @field_validator('age_preferences')
    def age_preferences_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['olderThan45', 'olderThan14', 'olderThan16', 'withHealthProblems', 'students', 'pensioners']):
                raise ValueError("each list item must be one of ('olderThan45', 'olderThan14', 'olderThan16', 'withHealthProblems', 'students', 'pensioners')")
        return value

    @field_validator('billing_type')
    def billing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['package', 'packageOrSingle']):
            raise ValueError("must be one of enum values ('package', 'packageOrSingle')")
        return value

    @field_validator('bonuses')
    def bonuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['prozivanie', 'pitanie', 'medicinskaia_straxovka', 'uniform', 'oplata_benzina', 'transport_do_raboty', 'skidki_v_kompanii', 'parkovka', 'zony_otdyxa', 'podarki_detiam_na_prazdniki', 'oplata_mobilnoi_sviazi', 'obuchenie', 'kompensaciya_proezda_s_raboti', 'kasko', 'smartphone', 'uslugi_shinomontaza']):
                raise ValueError("each list item must be one of ('prozivanie', 'pitanie', 'medicinskaia_straxovka', 'uniform', 'oplata_benzina', 'transport_do_raboty', 'skidki_v_kompanii', 'parkovka', 'zony_otdyxa', 'podarki_detiam_na_prazdniki', 'oplata_mobilnoi_sviazi', 'obuchenie', 'kompensaciya_proezda_s_raboti', 'kasko', 'smartphone', 'uslugi_shinomontaza')")
        return value

    @field_validator('citizenship')
    def citizenship_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['rus', 'blr', 'kaz', 'kgz', 'tjk', 'arm', 'uzb', 'ukr']):
                raise ValueError("each list item must be one of ('rus', 'blr', 'kaz', 'kgz', 'tjk', 'arm', 'uzb', 'ukr')")
        return value

    @field_validator('construction_work_type')
    def construction_work_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['paintingWorks', 'wallCovering', 'tileWork', 'mountingAndInstallation', 'finishingWork', 'roofing', 'installationAndConfigurationOfEquipment', 'weldingWork', 'constructionOfFacades', 'formingMaterials', 'concreteAndStoneWorks', 'repairWork', 'other']):
                raise ValueError("each list item must be one of ('paintingWorks', 'wallCovering', 'tileWork', 'mountingAndInstallation', 'finishingWork', 'roofing', 'installationAndConfigurationOfEquipment', 'weldingWork', 'constructionOfFacades', 'formingMaterials', 'concreteAndStoneWorks', 'repairWork', 'other')")
        return value

    @field_validator('cuisine')
    def cuisine_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['russian', 'european', 'caucasian', 'italian', 'japanese', 'turkish', 'other']):
                raise ValueError("each list item must be one of ('russian', 'european', 'caucasian', 'italian', 'japanese', 'turkish', 'other')")
        return value

    @field_validator('delivery_method')
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['car', 'bike', 'scooter', 'foot']):
                raise ValueError("each list item must be one of ('car', 'bike', 'scooter', 'foot')")
        return value

    @field_validator('driving_experience')
    def driving_experience_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['noExperience', 'lessThan1', '1-2', '3-5', '6-10', 'moreThan10']):
            raise ValueError("must be one of enum values ('noExperience', 'lessThan1', '1-2', '3-5', '6-10', 'moreThan10')")
        return value

    @field_validator('driving_license_category')
    def driving_license_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['A', 'AI', 'AII', 'AIII', 'AIV', 'B', 'B1', 'BE', 'C', 'C1', 'C1E', 'CE', 'D', 'D1', 'D1E', 'DE', 'E', 'F', 'Tm', 'Tb', 'M']):
                raise ValueError("each list item must be one of ('A', 'AI', 'AII', 'AIII', 'AIV', 'B', 'B1', 'BE', 'C', 'C1', 'C1E', 'CE', 'D', 'D1', 'D1E', 'DE', 'E', 'F', 'Tm', 'Tb', 'M')")
        return value

    @field_validator('eatery_type')
    def eatery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cafe', 'bar', 'fastFood', 'restaurant', 'canteen', 'bakery', 'other']):
                raise ValueError("each list item must be one of ('cafe', 'bar', 'fastFood', 'restaurant', 'canteen', 'bakery', 'other')")
        return value

    @field_validator('experience')
    def experience_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['noMatter', 'moreThan1', 'moreThan3', 'moreThan5', 'moreThan10']):
            raise ValueError("must be one of enum values ('noMatter', 'moreThan1', 'moreThan3', 'moreThan5', 'moreThan10')")
        return value

    @field_validator('facility_type')
    def facility_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['production', 'logisticsCenter', 'warehouse', 'other']):
                raise ValueError("each list item must be one of ('production', 'logisticsCenter', 'warehouse', 'other')")
        return value

    @field_validator('food_production_shop_type')
    def food_production_shop_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cold', 'hot', 'confectionery', 'preparation', 'other']):
                raise ValueError("each list item must be one of ('cold', 'hot', 'confectionery', 'preparation', 'other')")
        return value

    @field_validator('payout_frequency')
    def payout_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['dailyPay', 'weeklyPay', 'biweeklyPay', 'thriceMonthlyPay', 'monthlyPay']):
            raise ValueError("must be one of enum values ('dailyPay', 'weeklyPay', 'biweeklyPay', 'thriceMonthlyPay', 'monthlyPay')")
        return value

    @field_validator('programs')
    def programs_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['chastyeVyplaty']):
                raise ValueError("each list item must be one of ('chastyeVyplaty')")
        return value

    @field_validator('registration_method')
    def registration_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['contract', 'gph_ip', 'gph_self_employed', 'gph_individual']):
                raise ValueError("each list item must be one of ('contract', 'gph_ip', 'gph_self_employed', 'gph_individual')")
        return value

    @field_validator('retail_equipment_type')
    def retail_equipment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['cashRegisterAndPosTerminals', 'accountingSoftware']):
                raise ValueError("each list item must be one of ('cashRegisterAndPosTerminals', 'accountingSoftware')")
        return value

    @field_validator('retail_shop_type')
    def retail_shop_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['hypermarketOrSupermarket', 'grocery', 'electronicsAndHouseholdAppliances', 'clothesAndShoes', 'perfumesAndCosmetics', 'constructionAndHouseholdGoods', 'childrenGoods', 'sportingGoods', 'petShop', 'pharmacy', 'other']):
                raise ValueError("each list item must be one of ('hypermarketOrSupermarket', 'grocery', 'electronicsAndHouseholdAppliances', 'clothesAndShoes', 'perfumesAndCosmetics', 'constructionAndHouseholdGoods', 'childrenGoods', 'sportingGoods', 'petShop', 'pharmacy', 'other')")
        return value

    @field_validator('schedule')
    def schedule_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['flyInFlyOut', 'fixed', 'flexible', 'shift']):
            raise ValueError("must be one of enum values ('flyInFlyOut', 'fixed', 'flexible', 'shift')")
        return value

    @field_validator('work_format')
    def work_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['office', 'remote', 'gibrid']):
                raise ValueError("each list item must be one of ('office', 'remote', 'gibrid')")
        return value

    @field_validator('worker_class')
    def worker_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['1', '2', '3', '4', '5andHigher', 'notNeeded']):
                raise ValueError("each list item must be one of ('1', '2', '3', '4', '5andHigher', 'notNeeded')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VacancyV2Create from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of age
        if self.age:
            _dict['age'] = self.age.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apply_processing
        if self.apply_processing:
            _dict['apply_processing'] = self.apply_processing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts
        if self.contacts:
            _dict['contacts'] = self.contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hierarchy
        if self.hierarchy:
            _dict['hierarchy'] = self.hierarchy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salary
        if self.salary:
            _dict['salary'] = self.salary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salary_detail
        if self.salary_detail:
            _dict['salary_detail'] = self.salary_detail.to_dict()
        # set to None if administrator_organization_type (nullable) is None
        # and model_fields_set contains the field
        if self.administrator_organization_type is None and "administrator_organization_type" in self.model_fields_set:
            _dict['administrator_organization_type'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if apply_processing (nullable) is None
        # and model_fields_set contains the field
        if self.apply_processing is None and "apply_processing" in self.model_fields_set:
            _dict['apply_processing'] = None

        # set to None if bonuses (nullable) is None
        # and model_fields_set contains the field
        if self.bonuses is None and "bonuses" in self.model_fields_set:
            _dict['bonuses'] = None

        # set to None if citizenship (nullable) is None
        # and model_fields_set contains the field
        if self.citizenship is None and "citizenship" in self.model_fields_set:
            _dict['citizenship'] = None

        # set to None if construction_work_type (nullable) is None
        # and model_fields_set contains the field
        if self.construction_work_type is None and "construction_work_type" in self.model_fields_set:
            _dict['construction_work_type'] = None

        # set to None if cuisine (nullable) is None
        # and model_fields_set contains the field
        if self.cuisine is None and "cuisine" in self.model_fields_set:
            _dict['cuisine'] = None

        # set to None if delivery_method (nullable) is None
        # and model_fields_set contains the field
        if self.delivery_method is None and "delivery_method" in self.model_fields_set:
            _dict['delivery_method'] = None

        # set to None if driving_experience (nullable) is None
        # and model_fields_set contains the field
        if self.driving_experience is None and "driving_experience" in self.model_fields_set:
            _dict['driving_experience'] = None

        # set to None if driving_license_category (nullable) is None
        # and model_fields_set contains the field
        if self.driving_license_category is None and "driving_license_category" in self.model_fields_set:
            _dict['driving_license_category'] = None

        # set to None if eatery_type (nullable) is None
        # and model_fields_set contains the field
        if self.eatery_type is None and "eatery_type" in self.model_fields_set:
            _dict['eatery_type'] = None

        # set to None if education_level (nullable) is None
        # and model_fields_set contains the field
        if self.education_level is None and "education_level" in self.model_fields_set:
            _dict['education_level'] = None

        # set to None if facility_type (nullable) is None
        # and model_fields_set contains the field
        if self.facility_type is None and "facility_type" in self.model_fields_set:
            _dict['facility_type'] = None

        # set to None if food_production_shop_type (nullable) is None
        # and model_fields_set contains the field
        if self.food_production_shop_type is None and "food_production_shop_type" in self.model_fields_set:
            _dict['food_production_shop_type'] = None

        # set to None if grade (nullable) is None
        # and model_fields_set contains the field
        if self.grade is None and "grade" in self.model_fields_set:
            _dict['grade'] = None

        # set to None if is_company_car (nullable) is None
        # and model_fields_set contains the field
        if self.is_company_car is None and "is_company_car" in self.model_fields_set:
            _dict['is_company_car'] = None

        # set to None if medical_book (nullable) is None
        # and model_fields_set contains the field
        if self.medical_book is None and "medical_book" in self.model_fields_set:
            _dict['medical_book'] = None

        # set to None if medical_specialization (nullable) is None
        # and model_fields_set contains the field
        if self.medical_specialization is None and "medical_specialization" in self.model_fields_set:
            _dict['medical_specialization'] = None

        # set to None if medical_specialization_ids (nullable) is None
        # and model_fields_set contains the field
        if self.medical_specialization_ids is None and "medical_specialization_ids" in self.model_fields_set:
            _dict['medical_specialization_ids'] = None

        # set to None if profession (nullable) is None
        # and model_fields_set contains the field
        if self.profession is None and "profession" in self.model_fields_set:
            _dict['profession'] = None

        # set to None if registration_method (nullable) is None
        # and model_fields_set contains the field
        if self.registration_method is None and "registration_method" in self.model_fields_set:
            _dict['registration_method'] = None

        # set to None if retail_equipment_type (nullable) is None
        # and model_fields_set contains the field
        if self.retail_equipment_type is None and "retail_equipment_type" in self.model_fields_set:
            _dict['retail_equipment_type'] = None

        # set to None if retail_shop_type (nullable) is None
        # and model_fields_set contains the field
        if self.retail_shop_type is None and "retail_shop_type" in self.model_fields_set:
            _dict['retail_shop_type'] = None

        # set to None if salary_detail (nullable) is None
        # and model_fields_set contains the field
        if self.salary_detail is None and "salary_detail" in self.model_fields_set:
            _dict['salary_detail'] = None

        # set to None if shifts (nullable) is None
        # and model_fields_set contains the field
        if self.shifts is None and "shifts" in self.model_fields_set:
            _dict['shifts'] = None

        # set to None if tools_availability (nullable) is None
        # and model_fields_set contains the field
        if self.tools_availability is None and "tools_availability" in self.model_fields_set:
            _dict['tools_availability'] = None

        # set to None if vacancy_code (nullable) is None
        # and model_fields_set contains the field
        if self.vacancy_code is None and "vacancy_code" in self.model_fields_set:
            _dict['vacancy_code'] = None

        # set to None if vehicle_type (nullable) is None
        # and model_fields_set contains the field
        if self.vehicle_type is None and "vehicle_type" in self.model_fields_set:
            _dict['vehicle_type'] = None

        # set to None if work_days_per_week (nullable) is None
        # and model_fields_set contains the field
        if self.work_days_per_week is None and "work_days_per_week" in self.model_fields_set:
            _dict['work_days_per_week'] = None

        # set to None if work_hours_per_day (nullable) is None
        # and model_fields_set contains the field
        if self.work_hours_per_day is None and "work_hours_per_day" in self.model_fields_set:
            _dict['work_hours_per_day'] = None

        # set to None if worker_class (nullable) is None
        # and model_fields_set contains the field
        if self.worker_class is None and "worker_class" in self.model_fields_set:
            _dict['worker_class'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VacancyV2Create from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administrator_organization_type": obj.get("administrator_organization_type"),
            "age": AgeCriteria.from_dict(obj["age"]) if obj.get("age") is not None else None,
            "age_preferences": obj.get("age_preferences"),
            "apply_processing": ApplyProcessing.from_dict(obj["apply_processing"]) if obj.get("apply_processing") is not None else None,
            "billing_type": obj.get("billing_type"),
            "bonuses": obj.get("bonuses"),
            "business_area": obj.get("business_area"),
            "citizenship": obj.get("citizenship"),
            "construction_work_type": obj.get("construction_work_type"),
            "contacts": VacancyV2CreateContacts.from_dict(obj["contacts"]) if obj.get("contacts") is not None else None,
            "cuisine": obj.get("cuisine"),
            "delivery_method": obj.get("delivery_method"),
            "description": obj.get("description"),
            "driving_experience": obj.get("driving_experience"),
            "driving_license_category": obj.get("driving_license_category"),
            "eatery_type": obj.get("eatery_type"),
            "education_level": obj.get("education_level"),
            "employment": obj.get("employment"),
            "experience": obj.get("experience"),
            "facility_type": obj.get("facility_type"),
            "food_production_shop_type": obj.get("food_production_shop_type"),
            "grade": obj.get("grade"),
            "hierarchy": VacancyV2CreateHierarchy.from_dict(obj["hierarchy"]) if obj.get("hierarchy") is not None else None,
            "image_url": obj.get("image_url"),
            "is_company_car": obj.get("is_company_car"),
            "is_side_job": obj.get("is_side_job"),
            "location": VacancyV2CreateLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "medical_book": obj.get("medical_book"),
            "medical_specialization": obj.get("medical_specialization"),
            "medical_specialization_ids": obj.get("medical_specialization_ids"),
            "payout_frequency": obj.get("payout_frequency"),
            "profession": obj.get("profession"),
            "programs": obj.get("programs"),
            "registration_method": obj.get("registration_method"),
            "retail_equipment_type": obj.get("retail_equipment_type"),
            "retail_shop_type": obj.get("retail_shop_type"),
            "salary": VacancyV2CreateSalary.from_dict(obj["salary"]) if obj.get("salary") is not None else None,
            "salary_detail": SalaryDetail.from_dict(obj["salary_detail"]) if obj.get("salary_detail") is not None else None,
            "schedule": obj.get("schedule"),
            "shifts": obj.get("shifts"),
            "title": obj.get("title"),
            "tools_availability": obj.get("tools_availability"),
            "vacancy_code": obj.get("vacancy_code"),
            "vehicle_type": obj.get("vehicle_type"),
            "work_days_per_week": obj.get("work_days_per_week"),
            "work_format": obj.get("work_format"),
            "work_hours_per_day": obj.get("work_hours_per_day"),
            "worker_class": obj.get("worker_class")
        })
        return _obj


