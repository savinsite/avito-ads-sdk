# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from avito_job.models.citizenship import Citizenship
from avito_job.models.driver_licence import DriverLicence
from avito_job.models.driving_experience import DrivingExperience
from avito_job.models.education_level import EducationLevel
from avito_job.models.gender import Gender
from avito_job.models.location import Location
from avito_job.models.medical_book import MedicalBook
from avito_job.models.own_transport import OwnTransport
from avito_job.models.specialization import Specialization
from typing import Optional, Set
from typing_extensions import Self

class SimplifiedResume(BaseModel):
    """
    SimplifiedResume
    """ # noqa: E501
    age: Optional[StrictInt] = None
    created: Optional[datetime] = None
    driver_licence: Optional[DriverLicence] = None
    driver_licence_category: Optional[List[StrictStr]] = None
    driving_experience: Optional[DrivingExperience] = None
    education_level: Optional[EducationLevel] = None
    gender: Optional[Gender] = None
    id: Optional[StrictInt] = None
    is_purchased: Optional[StrictBool] = None
    location: Optional[Location] = None
    medical_book: Optional[MedicalBook] = None
    nationality: Optional[Citizenship] = None
    own_transport: Optional[OwnTransport] = None
    salary: Optional[Union[StrictFloat, StrictInt]] = None
    specialization: Optional[Specialization] = None
    title: Optional[StrictStr] = None
    total_experience: Optional[StrictInt] = None
    updated: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["age", "created", "driver_licence", "driver_licence_category", "driving_experience", "education_level", "gender", "id", "is_purchased", "location", "medical_book", "nationality", "own_transport", "salary", "specialization", "title", "total_experience", "updated"]

    @field_validator('driver_licence_category')
    def driver_licence_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['a', 'b', 'be', 'c', 'ce', 'd', 'de', 'm', 'tm', 'tb']):
                raise ValueError("each list item must be one of ('a', 'b', 'be', 'c', 'ce', 'd', 'de', 'm', 'tm', 'tb')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimplifiedResume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "age",
            "created",
            "id",
            "is_purchased",
            "salary",
            "title",
            "total_experience",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nationality
        if self.nationality:
            _dict['nationality'] = self.nationality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specialization
        if self.specialization:
            _dict['specialization'] = self.specialization.to_dict()
        # set to None if education_level (nullable) is None
        # and model_fields_set contains the field
        if self.education_level is None and "education_level" in self.model_fields_set:
            _dict['education_level'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimplifiedResume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "created": obj.get("created"),
            "driver_licence": obj.get("driver_licence"),
            "driver_licence_category": obj.get("driver_licence_category"),
            "driving_experience": obj.get("driving_experience"),
            "education_level": obj.get("education_level"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "is_purchased": obj.get("is_purchased"),
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "medical_book": obj.get("medical_book"),
            "nationality": Citizenship.from_dict(obj["nationality"]) if obj.get("nationality") is not None else None,
            "own_transport": obj.get("own_transport"),
            "salary": obj.get("salary"),
            "specialization": Specialization.from_dict(obj["specialization"]) if obj.get("specialization") is not None else None,
            "title": obj.get("title"),
            "total_experience": obj.get("total_experience"),
            "updated": obj.get("updated")
        })
        return _obj


