# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ApplyProcessing(BaseModel):
    """
    Объект с настройкой обработки откликов на вакансию.  Даёт возможность настроить отклики только с резюме. 
    """ # noqa: E501
    additional_questions: Optional[List[StrictStr]] = Field(default=None, description="*DEPRECATED* Заполнение поля не влияет на вакансию.   Массив со списком дополнительных вопросов, которые задаст ассистент Авито.    - `experience` - вопрос про опыт работы.  В качестве критерия будет использоваться значение поля `experience`.  В результатах опроса ассистент отметит, достаточно у кандидата опыта или нет.     - `citizenship` - вопрос про гражданство. В качестве критерия будет использоваться значение поля `citizenship`, если оно заполнено.    - `age` - вопрос про возраст. В качестве критерия будет использоваться значение поля `age`, если оно заполнено. ")
    apply_type: Optional[StrictStr] = Field(default=None, description="Принимает два значения:    - `with_assistant` *DEPRECATED* - Указание данного значения не влияет на вакансию. Обработка отклика с помощью ассистента Авито. После отклика на вакансию  ассистент Авито предложит кандидату ответить на несколько вопросов — результаты придут в чат. ФИО и номер телефона ассистент спросит в любом случае. Остальные вопросы можно настроить  в поле `additional_questions`.    - `only_with_resume` - на вакансию смогут откликаться только кандидаты с резюме. Если у кандидата нет резюме,  Авито поможет создать его и откликнуться на вакансию ")
    __properties: ClassVar[List[str]] = ["additional_questions", "apply_type"]

    @field_validator('additional_questions')
    def additional_questions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['experience', 'citizenship', 'age']):
                raise ValueError("each list item must be one of ('experience', 'citizenship', 'age')")
        return value

    @field_validator('apply_type')
    def apply_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['only_with_resume', 'with_assistant']):
            raise ValueError("must be one of enum values ('only_with_resume', 'with_assistant')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplyProcessing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplyProcessing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_questions": obj.get("additional_questions"),
            "apply_type": obj.get("apply_type")
        })
        return _obj


