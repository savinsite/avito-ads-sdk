# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class VacanciesGetByIdsBody(BaseModel):
    """
    VacanciesGetByIdsBody
    """ # noqa: E501
    fields: Optional[List[StrictStr]] = Field(default=None, description="Поля для основного тела ответа")
    ids: Annotated[List[StrictInt], Field(max_length=100)] = Field(description="Идентификаторы вакансий на сайте")
    params: Optional[List[StrictStr]] = Field(default=None, description="Дополнительные поля, которые входят в params (можно указать несколько значений через запятую). По умолчанию отображаются все поля. deprecated значения manufacturing_type, industry_type, programs, warehouse_functionality")
    __properties: ClassVar[List[str]] = ["fields", "ids", "params"]

    @field_validator('fields')
    def fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['title', 'description', 'url', 'salary', 'start_time', 'update_time', 'is_active']):
                raise ValueError("each list item must be one of ('title', 'description', 'url', 'salary', 'start_time', 'update_time', 'is_active')")
        return value

    @field_validator('params')
    def params_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['business_area', 'employment', 'schedule', 'experience', 'address', 'coordinates', 'change', 'where_to_work', 'payout_frequency', 'age_preferences', 'piecework_flag', 'paid_period', 'salary', 'salary_base_range', 'salary_base_bonus', 'taxes', 'is_company_car', 'driving_license_category', 'driving_experience', 'delivery_method', 'profession', 'registration_method', 'grade', 'medical_specialization', 'education_level', 'bonuses', 'worker_class', 'food_production_shop_type', 'eatery_type', 'cuisine', 'medical_book', 'retail_equipment_type', 'retail_shop_type', 'tools_availability', 'construction_work_type', 'work_format', 'manufacturing_type', 'industry_type', 'programs', 'warehouse_functionality', 'vehicle_type', 'administrator_organization_type', 'work_hours_per_day', 'work_days_per_week', 'shifts', 'vacancy_code']):
                raise ValueError("each list item must be one of ('business_area', 'employment', 'schedule', 'experience', 'address', 'coordinates', 'change', 'where_to_work', 'payout_frequency', 'age_preferences', 'piecework_flag', 'paid_period', 'salary', 'salary_base_range', 'salary_base_bonus', 'taxes', 'is_company_car', 'driving_license_category', 'driving_experience', 'delivery_method', 'profession', 'registration_method', 'grade', 'medical_specialization', 'education_level', 'bonuses', 'worker_class', 'food_production_shop_type', 'eatery_type', 'cuisine', 'medical_book', 'retail_equipment_type', 'retail_shop_type', 'tools_availability', 'construction_work_type', 'work_format', 'manufacturing_type', 'industry_type', 'programs', 'warehouse_functionality', 'vehicle_type', 'administrator_organization_type', 'work_hours_per_day', 'work_days_per_week', 'shifts', 'vacancy_code')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VacanciesGetByIdsBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VacanciesGetByIdsBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fields": obj.get("fields"),
            "ids": obj.get("ids"),
            "params": obj.get("params")
        })
        return _obj


