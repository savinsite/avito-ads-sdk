# coding: utf-8

"""
    Авито.Работа

    API для размещения, редактирования и снятия с публикации вакансии Авито Работа **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from avito_job.models.paid_period import PaidPeriod
from avito_job.models.salary_detail_base import SalaryDetailBase
from avito_job.models.taxes import Taxes
from typing import Optional, Set
from typing_extensions import Self

class SalaryDetail(BaseModel):
    """
    Подробная информация по заработной плате
    """ # noqa: E501
    base: Optional[SalaryDetailBase] = None
    paid_period: Optional[PaidPeriod] = None
    taxes: Optional[Taxes] = None
    __properties: ClassVar[List[str]] = ["base", "paid_period", "taxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalaryDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base
        if self.base:
            _dict['base'] = self.base.to_dict()
        # set to None if base (nullable) is None
        # and model_fields_set contains the field
        if self.base is None and "base" in self.model_fields_set:
            _dict['base'] = None

        # set to None if paid_period (nullable) is None
        # and model_fields_set contains the field
        if self.paid_period is None and "paid_period" in self.model_fields_set:
            _dict['paid_period'] = None

        # set to None if taxes (nullable) is None
        # and model_fields_set contains the field
        if self.taxes is None and "taxes" in self.model_fields_set:
            _dict['taxes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalaryDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base": SalaryDetailBase.from_dict(obj["base"]) if obj.get("base") is not None else None,
            "paid_period": obj.get("paid_period"),
            "taxes": obj.get("taxes")
        })
        return _obj


