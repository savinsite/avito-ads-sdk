# coding: utf-8

"""
    Мессенджер

    API Мессенджера - набор методов для получения списка чатов пользователя на Авито, получения сообщений в чате, отправки сообщения в чат и другие Через API Мессенджера можно организовать интеграцию между мессенджером Авито и сторонней системой в обе стороны  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from avito_messenger.models.message_content import MessageContent
from avito_messenger.models.message_quote import MessageQuote
from typing import Optional, Set
from typing_extensions import Self

class MessagesInner(BaseModel):
    """
    MessagesInner
    """ # noqa: E501
    author_id: Optional[StrictInt] = None
    content: Optional[MessageContent] = None
    created: Optional[StrictInt] = None
    direction: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    is_read: Optional[StrictBool] = Field(default=None, description="True, если сообщение уже было прочитано запрашиваемым пользователем. Иначе false")
    quote: Optional[MessageQuote] = None
    read: Optional[StrictInt] = Field(default=None, description="Unix-timestamp времени, когда сообщение было прочитано собеседником")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["author_id", "content", "created", "direction", "id", "is_read", "quote", "read", "type"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in', 'out']):
            raise ValueError("must be one of enum values ('in', 'out')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['text', 'image', 'link', 'item', 'location', 'call', 'deleted', 'voice', 'system']):
            raise ValueError("must be one of enum values ('text', 'image', 'link', 'item', 'location', 'call', 'deleted', 'voice', 'system')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote
        if self.quote:
            _dict['quote'] = self.quote.to_dict()
        # set to None if read (nullable) is None
        # and model_fields_set contains the field
        if self.read is None and "read" in self.model_fields_set:
            _dict['read'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author_id": obj.get("author_id"),
            "content": MessageContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "created": obj.get("created"),
            "direction": obj.get("direction"),
            "id": obj.get("id"),
            "is_read": obj.get("is_read"),
            "quote": MessageQuote.from_dict(obj["quote"]) if obj.get("quote") is not None else None,
            "read": obj.get("read"),
            "type": obj.get("type")
        })
        return _obj


