# coding: utf-8

"""
    Мессенджер

    API Мессенджера - набор методов для получения списка чатов пользователя на Авито, получения сообщений в чате, отправки сообщения в чат и другие Через API Мессенджера можно организовать интеграцию между мессенджером Авито и сторонней системой в обе стороны  **Авито API для бизнеса предоставляется согласно [Условиям использования](https://www.avito.ru/legal/pro_tools/public-api).** 

    The version of the OpenAPI document: 1
    Contact: supportautoload@avito.ru
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from avito_messenger.models.chat_context import ChatContext
from avito_messenger.models.chat_last_message import ChatLastMessage
from avito_messenger.models.chat_users_inner import ChatUsersInner
from typing import Optional, Set
from typing_extensions import Self

class Chat(BaseModel):
    """
    Chat
    """ # noqa: E501
    context: Optional[ChatContext] = None
    created: Optional[StrictInt] = Field(default=None, description="Unix-timestamp времени создания чата")
    id: Optional[StrictStr] = Field(default=None, description="Уникальный идентификтор чата")
    last_message: Optional[ChatLastMessage] = None
    updated: Optional[StrictInt] = Field(default=None, description="Unix-timestamp времени последнего обновления чата")
    users: Optional[List[ChatUsersInner]] = None
    __properties: ClassVar[List[str]] = ["context", "created", "id", "last_message", "updated", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Chat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_message
        if self.last_message:
            _dict['last_message'] = self.last_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Chat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": ChatContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "created": obj.get("created"),
            "id": obj.get("id"),
            "last_message": ChatLastMessage.from_dict(obj["last_message"]) if obj.get("last_message") is not None else None,
            "updated": obj.get("updated"),
            "users": [ChatUsersInner.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj


